{"_id":"_design/photoshare","_rev":"5-a1f6fbad433feeb4793e8cdf58fc3104","vendor":{"phonegap":{"phonegap-1.0.0rc3":"/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (typeof PhoneGap === \"undefined\") {\n\n/**\n * The order of events during page load and PhoneGap startup is as follows:\n *\n * onDOMContentLoaded         Internal event that is received when the web page is loaded and parsed.\n * window.onload              Body onload event.\n * onNativeReady              Internal event that indicates the PhoneGap native side is ready.\n * onPhoneGapInit             Internal event that kicks off creation of all PhoneGap JavaScript objects (runs constructors).\n * onPhoneGapReady            Internal event fired when all PhoneGap JavaScript objects have been created\n * onPhoneGapInfoReady        Internal event fired when device properties are available\n * onDeviceReady              User event fired to indicate that PhoneGap is ready\n * onResume                   User event fired to indicate a start/resume lifecycle event\n * onPause                    User event fired to indicate a pause lifecycle event\n * onDestroy                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).\n *\n * The only PhoneGap events that user code should register for are:\n *      onDeviceReady\n *      onResume\n *\n * Listeners can be registered as:\n *      document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n *      document.addEventListener(\"resume\", myResumeListener, false);\n *      document.addEventListener(\"pause\", myPauseListener, false);\n */\n\nif (typeof(DeviceInfo) !== 'object') {\n    var DeviceInfo = {};\n}\n\n/**\n * This represents the PhoneGap API itself, and provides a global namespace for accessing\n * information about the state of PhoneGap.\n * @class\n */\nvar PhoneGap = {\n    queue: {\n        ready: true,\n        commands: [],\n        timer: null\n    }\n};\n\n/**\n * List of resource files loaded by PhoneGap.\n * This is used to ensure JS and other files are loaded only once.\n */\nPhoneGap.resources = {base: true};\n\n/**\n * Determine if resource has been loaded by PhoneGap\n *\n * @param name\n * @return\n */\nPhoneGap.hasResource = function(name) {\n    return PhoneGap.resources[name];\n};\n\n/**\n * Add a resource to list of loaded resources by PhoneGap\n *\n * @param name\n */\nPhoneGap.addResource = function(name) {\n    PhoneGap.resources[name] = true;\n};\n\n/**\n * Custom pub-sub channel that can have functions subscribed to it\n * @constructor\n */\nPhoneGap.Channel = function (type)\n{\n    this.type = type;\n    this.handlers = {};\n    this.guid = 0;\n    this.fired = false;\n    this.enabled = true;\n};\n\n/**\n * Subscribes the given function to the channel. Any time that\n * Channel.fire is called so too will the function.\n * Optionally specify an execution context for the function\n * and a guid that can be used to stop subscribing to the channel.\n * Returns the guid.\n */\nPhoneGap.Channel.prototype.subscribe = function(f, c, g) {\n    // need a function to call\n    if (f === null) { return; }\n\n    var func = f;\n    if (typeof c === \"object\" && typeof f === \"function\") { func = PhoneGap.close(c, f); }\n\n    g = g || func.observer_guid || f.observer_guid || this.guid++;\n    func.observer_guid = g;\n    f.observer_guid = g;\n    this.handlers[g] = func;\n    return g;\n};\n\n/**\n * Like subscribe but the function is only called once and then it\n * auto-unsubscribes itself.\n */\nPhoneGap.Channel.prototype.subscribeOnce = function(f, c) {\n    var g = null;\n    var _this = this;\n    var m = function() {\n        f.apply(c || null, arguments);\n        _this.unsubscribe(g);\n    };\n    if (this.fired) {\n        if (typeof c === \"object\" && typeof f === \"function\") { f = PhoneGap.close(c, f); }\n        f.apply(this, this.fireArgs);\n    } else {\n        g = this.subscribe(m);\n    }\n    return g;\n};\n\n/**\n * Unsubscribes the function with the given guid from the channel.\n */\nPhoneGap.Channel.prototype.unsubscribe = function(g) {\n    if (typeof g === \"function\") { g = g.observer_guid; }\n    this.handlers[g] = null;\n    delete this.handlers[g];\n};\n\n/**\n * Calls all functions subscribed to this channel.\n */\nPhoneGap.Channel.prototype.fire = function(e) {\n    if (this.enabled) {\n        var fail = false;\n        var item, handler, rv;\n        for (item in this.handlers) {\n            if (this.handlers.hasOwnProperty(item)) {\n                handler = this.handlers[item];\n                if (typeof handler === \"function\") {\n                    rv = (handler.apply(this, arguments) === false);\n                    fail = fail || rv;\n                }\n            }\n        }\n        this.fired = true;\n        this.fireArgs = arguments;\n        return !fail;\n    }\n    return true;\n};\n\n/**\n * Calls the provided function only after all of the channels specified\n * have been fired.\n */\nPhoneGap.Channel.join = function(h, c) {\n    var i = c.length;\n    var f = function() {\n        if (!(--i)) {\n            h();\n        }\n    };\n    var len = i;\n    var j;\n    for (j=0; j<len; j++) {\n        if (!c[j].fired) {\n            c[j].subscribeOnce(f);\n        }\n        else {\n            i--;\n        }\n    }\n    if (!i) {\n        h();\n    }\n};\n\n/**\n * Boolean flag indicating if the PhoneGap API is available and initialized.\n */ // TODO: Remove this, it is unused here ... -jm\nPhoneGap.available = DeviceInfo.uuid !== undefined;\n\n/**\n * Add an initialization function to a queue that ensures it will run and initialize\n * application constructors only once PhoneGap has been initialized.\n * @param {Function} func The function callback you want run once PhoneGap is initialized\n */\nPhoneGap.addConstructor = function(func) {\n    PhoneGap.onPhoneGapInit.subscribeOnce(function() {\n        try {\n            func();\n        } catch(e) {\n            console.log(\"Failed to run constructor: \" + e);\n        }\n    });\n};\n\n/**\n * Plugins object\n */\nif (!window.plugins) {\n    window.plugins = {};\n}\n\n/**\n * Adds a plugin object to window.plugins.\n * The plugin is accessed using window.plugins.<name>\n *\n * @param name          The plugin name\n * @param obj           The plugin object\n */\nPhoneGap.addPlugin = function(name, obj) {\n    if (!window.plugins[name]) {\n        window.plugins[name] = obj;\n    }\n    else {\n        console.log(\"Error: Plugin \"+name+\" already exists.\");\n    }\n};\n\n/**\n * onDOMContentLoaded channel is fired when the DOM content\n * of the page has been parsed.\n */\nPhoneGap.onDOMContentLoaded = new PhoneGap.Channel('onDOMContentLoaded');\n\n/**\n * onNativeReady channel is fired when the PhoneGap native code\n * has been initialized.\n */\nPhoneGap.onNativeReady = new PhoneGap.Channel('onNativeReady');\n\n/**\n * onPhoneGapInit channel is fired when the web page is fully loaded and\n * PhoneGap native code has been initialized.\n */\nPhoneGap.onPhoneGapInit = new PhoneGap.Channel('onPhoneGapInit');\n\n/**\n * onPhoneGapReady channel is fired when the JS PhoneGap objects have been created.\n */\nPhoneGap.onPhoneGapReady = new PhoneGap.Channel('onPhoneGapReady');\n\n/**\n * onPhoneGapInfoReady channel is fired when the PhoneGap device properties\n * has been set.\n */\nPhoneGap.onPhoneGapInfoReady = new PhoneGap.Channel('onPhoneGapInfoReady');\n\n/**\n * onPhoneGapConnectionReady channel is fired when the PhoneGap connection properties\n * has been set.\n */\nPhoneGap.onPhoneGapConnectionReady = new PhoneGap.Channel('onPhoneGapConnectionReady');\n\n/**\n * onResume channel is fired when the PhoneGap native code\n * resumes.\n */\nPhoneGap.onResume = new PhoneGap.Channel('onResume');\n\n/**\n * onPause channel is fired when the PhoneGap native code\n * pauses.\n */\nPhoneGap.onPause = new PhoneGap.Channel('onPause');\n\n/**\n * onDestroy channel is fired when the PhoneGap native code\n * is destroyed.  It is used internally.\n * Window.onunload should be used by the user.\n */\nPhoneGap.onDestroy = new PhoneGap.Channel('onDestroy');\nPhoneGap.onDestroy.subscribeOnce(function() {\n    PhoneGap.shuttingDown = true;\n});\nPhoneGap.shuttingDown = false;\n\n// _nativeReady is global variable that the native side can set\n// to signify that the native code is ready. It is a global since\n// it may be called before any PhoneGap JS is ready.\nif (typeof _nativeReady !== 'undefined') { PhoneGap.onNativeReady.fire(); }\n\n/**\n * onDeviceReady is fired only after all PhoneGap objects are created and\n * the device properties are set.\n */\nPhoneGap.onDeviceReady = new PhoneGap.Channel('onDeviceReady');\n\n\n// Array of channels that must fire before \"deviceready\" is fired\nPhoneGap.deviceReadyChannelsArray = [ PhoneGap.onPhoneGapReady, PhoneGap.onPhoneGapInfoReady, PhoneGap.onPhoneGapConnectionReady];\n\n// Hashtable of user defined channels that must also fire before \"deviceready\" is fired\nPhoneGap.deviceReadyChannelsMap = {};\n\n/**\n * Indicate that a feature needs to be initialized before it is ready to be used.\n * This holds up PhoneGap's \"deviceready\" event until the feature has been initialized\n * and PhoneGap.initComplete(feature) is called.\n *\n * @param feature {String}     The unique feature name\n */\nPhoneGap.waitForInitialization = function(feature) {\n    if (feature) {\n        var channel = new PhoneGap.Channel(feature);\n        PhoneGap.deviceReadyChannelsMap[feature] = channel;\n        PhoneGap.deviceReadyChannelsArray.push(channel);\n    }\n};\n\n/**\n * Indicate that initialization code has completed and the feature is ready to be used.\n *\n * @param feature {String}     The unique feature name\n */\nPhoneGap.initializationComplete = function(feature) {\n    var channel = PhoneGap.deviceReadyChannelsMap[feature];\n    if (channel) {\n        channel.fire();\n    }\n};\n\n/**\n * Create all PhoneGap objects once page has fully loaded and native side is ready.\n */\nPhoneGap.Channel.join(function() {\n\n    // Start listening for XHR callbacks\n    setTimeout(function() {\n            if (PhoneGap.UsePolling) {\n                PhoneGap.JSCallbackPolling();\n            }\n            else {\n                var polling = prompt(\"usePolling\", \"gap_callbackServer:\");\n                PhoneGap.UsePolling = polling;\n                if (polling == \"true\") {\n                    PhoneGap.UsePolling = true;\n                    PhoneGap.JSCallbackPolling();\n                }\n                else {\n                    PhoneGap.UsePolling = false;\n                    PhoneGap.JSCallback();\n                }\n            }\n        }, 1);\n\n    // Run PhoneGap constructors\n    PhoneGap.onPhoneGapInit.fire();\n\n    // Fire event to notify that all objects are created\n    PhoneGap.onPhoneGapReady.fire();\n\n    // Fire onDeviceReady event once all constructors have run and PhoneGap info has been\n    // received from native side, and any user defined initialization channels.\n    PhoneGap.Channel.join(function() {\n        PhoneGap.onDeviceReady.fire();\n\n        // Fire the onresume event, since first one happens before JavaScript is loaded\n        PhoneGap.onResume.fire();\n    }, PhoneGap.deviceReadyChannelsArray);\n\n}, [ PhoneGap.onDOMContentLoaded, PhoneGap.onNativeReady ]);\n\n// Listen for DOMContentLoaded and notify our channel subscribers\ndocument.addEventListener('DOMContentLoaded', function() {\n    PhoneGap.onDOMContentLoaded.fire();\n}, false);\n\n// Intercept calls to document.addEventListener and watch for deviceready\nPhoneGap.m_document_addEventListener = document.addEventListener;\n\ndocument.addEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (e === 'deviceready') {\n        PhoneGap.onDeviceReady.subscribeOnce(handler);\n    } else if (e === 'resume') {\n        PhoneGap.onResume.subscribe(handler);\n        if (PhoneGap.onDeviceReady.fired) {\n            PhoneGap.onResume.fire();\n        }\n    } else if (e === 'pause') {\n        PhoneGap.onPause.subscribe(handler);\n    }\n    else {\n        // If subscribing to Android backbutton\n        if (e === 'backbutton') {\n            PhoneGap.exec(null, null, \"App\", \"overrideBackbutton\", [true]);\n        }\n\n        PhoneGap.m_document_addEventListener.call(document, evt, handler, capture);\n    }\n};\n\n// Intercept calls to document.removeEventListener and watch for events that\n// are generated by PhoneGap native code\nPhoneGap.m_document_removeEventListener = document.removeEventListener;\n\ndocument.removeEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n\n    // If unsubscribing to Android backbutton\n    if (e === 'backbutton') {\n        PhoneGap.exec(null, null, \"App\", \"overrideBackbutton\", [false]);\n    }\n\n    PhoneGap.m_document_removeEventListener.call(document, evt, handler, capture);\n};\n\n/**\n * Method to fire event from native code\n */\nPhoneGap.fireEvent = function(type) {\n    var e = document.createEvent('Events');\n    e.initEvent(type);\n    document.dispatchEvent(e);\n};\n\n/**\n * If JSON not included, use our own stringify. (Android 1.6)\n * The restriction on ours is that it must be an array of simple types.\n *\n * @param args\n * @return {String}\n */\nPhoneGap.stringify = function(args) {\n    if (typeof JSON === \"undefined\") {\n        var s = \"[\";\n        var i, type, start, name, nameType, a;\n        for (i = 0; i < args.length; i++) {\n            if (args[i] !== null) {\n                if (i > 0) {\n                    s = s + \",\";\n                }\n                type = typeof args[i];\n                if ((type === \"number\") || (type === \"boolean\")) {\n                    s = s + args[i];\n                } else if (args[i] instanceof Array) {\n                    s = s + \"[\" + args[i] + \"]\";\n                } else if (args[i] instanceof Object) {\n                    start = true;\n                    s = s + '{';\n                    for (name in args[i]) {\n                        if (args[i][name] !== null) {\n                            if (!start) {\n                                s = s + ',';\n                            }\n                            s = s + '\"' + name + '\":';\n                            nameType = typeof args[i][name];\n                            if ((nameType === \"number\") || (nameType === \"boolean\")) {\n                                s = s + args[i][name];\n                            } else if ((typeof args[i][name]) === 'function') {\n                                // don't copy the functions\n                                s = s + '\"\"';\n                            } else if (args[i][name] instanceof Object) {\n                                s = s + PhoneGap.stringify(args[i][name]);\n                            } else {\n                                s = s + '\"' + args[i][name] + '\"';\n                            }\n                            start = false;\n                        }\n                    }\n                    s = s + '}';\n                } else {\n                    a = args[i].replace(/\\\\/g, '\\\\\\\\');\n                    a = a.replace(/\"/g, '\\\\\"');\n                    s = s + '\"' + a + '\"';\n                }\n            }\n        }\n        s = s + \"]\";\n        return s;\n    } else {\n        return JSON.stringify(args);\n    }\n};\n\n/**\n * Does a deep clone of the object.\n *\n * @param obj\n * @return {Object}\n */\nPhoneGap.clone = function(obj) {\n    var i, retVal;\n    if(!obj) { \n        return obj;\n    }\n    \n    if(obj instanceof Array){\n        retVal = [];\n        for(i = 0; i < obj.length; ++i){\n            retVal.push(PhoneGap.clone(obj[i]));\n        }\n        return retVal;\n    }\n    \n    if (typeof obj === \"function\") {\n        return obj;\n    }\n    \n    if(!(obj instanceof Object)){\n        return obj;\n    }\n    \n    if (obj instanceof Date) {\n        return obj;\n    }\n    \n    retVal = {};\n    for(i in obj){\n        if(!(i in retVal) || retVal[i] !== obj[i]) {\n            retVal[i] = PhoneGap.clone(obj[i]);\n        }\n    }\n    return retVal;\n};\n\nPhoneGap.callbackId = 0;\nPhoneGap.callbacks = {};\nPhoneGap.callbackStatus = {\n    NO_RESULT: 0,\n    OK: 1,\n    CLASS_NOT_FOUND_EXCEPTION: 2,\n    ILLEGAL_ACCESS_EXCEPTION: 3,\n    INSTANTIATION_EXCEPTION: 4,\n    MALFORMED_URL_EXCEPTION: 5,\n    IO_EXCEPTION: 6,\n    INVALID_ACTION: 7,\n    JSON_EXCEPTION: 8,\n    ERROR: 9\n    };\n\n\n/**\n * Execute a PhoneGap command.  It is up to the native side whether this action is synch or async.\n * The native side can return:\n *      Synchronous: PluginResult object as a JSON string\n *      Asynchrounous: Empty string \"\"\n * If async, the native side will PhoneGap.callbackSuccess or PhoneGap.callbackError,\n * depending upon the result of the action.\n *\n * @param {Function} success    The success callback\n * @param {Function} fail       The fail callback\n * @param {String} service      The name of the service to use\n * @param {String} action       Action to be run in PhoneGap\n * @param {Array.<String>} [args]     Zero or more arguments to pass to the method\n */\nPhoneGap.exec = function(success, fail, service, action, args) {\n    try {\n        var callbackId = service + PhoneGap.callbackId++;\n        if (success || fail) {\n            PhoneGap.callbacks[callbackId] = {success:success, fail:fail};\n        }\n\n        var r = prompt(PhoneGap.stringify(args), \"gap:\"+PhoneGap.stringify([service, action, callbackId, true]));\n\n        // If a result was returned\n        if (r.length > 0) {\n            eval(\"var v=\"+r+\";\");\n\n            // If status is OK, then return value back to caller\n            if (v.status === PhoneGap.callbackStatus.OK) {\n\n                // If there is a success callback, then call it now with\n                // returned value\n                if (success) {\n                    try {\n                        success(v.message);\n                    } catch (e) {\n                        console.log(\"Error in success callback: \" + callbackId  + \" = \" + e);\n                    }\n\n                    // Clear callback if not expecting any more results\n                    if (!v.keepCallback) {\n                        delete PhoneGap.callbacks[callbackId];\n                    }\n                }\n                return v.message;\n            }\n\n            // If no result\n            else if (v.status === PhoneGap.callbackStatus.NO_RESULT) {\n\n                // Clear callback if not expecting any more results\n                if (!v.keepCallback) {\n                    delete PhoneGap.callbacks[callbackId];\n                }\n            }\n\n            // If error, then display error\n            else {\n                console.log(\"Error: Status=\"+v.status+\" Message=\"+v.message);\n\n                // If there is a fail callback, then call it now with returned value\n                if (fail) {\n                    try {\n                        fail(v.message);\n                    }\n                    catch (e1) {\n                        console.log(\"Error in error callback: \"+callbackId+\" = \"+e1);\n                    }\n\n                    // Clear callback if not expecting any more results\n                    if (!v.keepCallback) {\n                        delete PhoneGap.callbacks[callbackId];\n                    }\n                }\n                return null;\n            }\n        }\n    } catch (e2) {\n        console.log(\"Error: \"+e2);\n    }\n};\n\n/**\n * Called by native code when returning successful result from an action.\n *\n * @param callbackId\n * @param args\n */\nPhoneGap.callbackSuccess = function(callbackId, args) {\n    if (PhoneGap.callbacks[callbackId]) {\n\n        // If result is to be sent to callback\n        if (args.status === PhoneGap.callbackStatus.OK) {\n            try {\n                if (PhoneGap.callbacks[callbackId].success) {\n                    PhoneGap.callbacks[callbackId].success(args.message);\n                }\n            }\n            catch (e) {\n                console.log(\"Error in success callback: \"+callbackId+\" = \"+e);\n            }\n        }\n\n        // Clear callback if not expecting any more results\n        if (!args.keepCallback) {\n            delete PhoneGap.callbacks[callbackId];\n        }\n    }\n};\n\n/**\n * Called by native code when returning error result from an action.\n *\n * @param callbackId\n * @param args\n */\nPhoneGap.callbackError = function(callbackId, args) {\n    if (PhoneGap.callbacks[callbackId]) {\n        try {\n            if (PhoneGap.callbacks[callbackId].fail) {\n                PhoneGap.callbacks[callbackId].fail(args.message);\n            }\n        }\n        catch (e) {\n            console.log(\"Error in error callback: \"+callbackId+\" = \"+e);\n        }\n\n        // Clear callback if not expecting any more results\n        if (!args.keepCallback) {\n            delete PhoneGap.callbacks[callbackId];\n        }\n    }\n};\n\n\n/**\n * Internal function used to dispatch the request to PhoneGap.  It processes the\n * command queue and executes the next command on the list.  If one of the\n * arguments is a JavaScript object, it will be passed on the QueryString of the\n * url, which will be turned into a dictionary on the other end.\n * @private\n */\n// TODO: Is this used?\nPhoneGap.run_command = function() {\n    if (!PhoneGap.available || !PhoneGap.queue.ready) {\n        return;\n    }\n    PhoneGap.queue.ready = false;\n\n    var args = PhoneGap.queue.commands.shift();\n    if (PhoneGap.queue.commands.length === 0) {\n        clearInterval(PhoneGap.queue.timer);\n        PhoneGap.queue.timer = null;\n    }\n\n    var uri = [];\n    var dict = null;\n    var i;\n    for (i = 1; i < args.length; i++) {\n        var arg = args[i];\n        if (arg === undefined || arg === null) {\n            arg = '';\n        }\n        if (typeof(arg) === 'object') {\n            dict = arg;\n        } else {\n            uri.push(encodeURIComponent(arg));\n        }\n    }\n    var url = \"gap://\" + args[0] + \"/\" + uri.join(\"/\");\n    if (dict !== null) {\n        var name;\n        var query_args = [];\n        for (name in dict) {\n            if (dict.hasOwnProperty(name) && (typeof (name) === 'string')) {\n                query_args.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(dict[name]));\n            }\n        }\n        if (query_args.length > 0) {\n            url += \"?\" + query_args.join(\"&\");\n        }\n    }\n    document.location = url;\n\n};\n\nPhoneGap.JSCallbackPort = null;\nPhoneGap.JSCallbackToken = null;\n\n/**\n * This is only for Android.\n *\n * Internal function that uses XHR to call into PhoneGap Java code and retrieve\n * any JavaScript code that needs to be run.  This is used for callbacks from\n * Java to JavaScript.\n */\nPhoneGap.JSCallback = function() {\n\n    // Exit if shutting down app\n    if (PhoneGap.shuttingDown) {\n        return;\n    }\n\n    // If polling flag was changed, start using polling from now on\n    if (PhoneGap.UsePolling) {\n        PhoneGap.JSCallbackPolling();\n        return;\n    }\n\n    var xmlhttp = new XMLHttpRequest();\n\n    // Callback function when XMLHttpRequest is ready\n    xmlhttp.onreadystatechange=function(){\n        if(xmlhttp.readyState === 4){\n\n            // Exit if shutting down app\n            if (PhoneGap.shuttingDown) {\n                return;\n            }\n\n            // If callback has JavaScript statement to execute\n            if (xmlhttp.status === 200) {\n\n                // Need to url decode the response\n                var msg = decodeURIComponent(xmlhttp.responseText);\n                setTimeout(function() {\n                    try {\n                        var t = eval(msg);\n                    }\n                    catch (e) {\n                        // If we're getting an error here, seeing the message will help in debugging\n                        console.log(\"JSCallback: Message from Server: \" + msg);\n                        console.log(\"JSCallback Error: \"+e);\n                    }\n                }, 1);\n                setTimeout(PhoneGap.JSCallback, 1);\n            }\n\n            // If callback ping (used to keep XHR request from timing out)\n            else if (xmlhttp.status === 404) {\n                setTimeout(PhoneGap.JSCallback, 10);\n            }\n\n            // If security error\n            else if (xmlhttp.status === 403) {\n                console.log(\"JSCallback Error: Invalid token.  Stopping callbacks.\");\n            }\n\n            // If server is stopping\n            else if (xmlhttp.status === 503) {\n                console.log(\"JSCallback Error: Service unavailable.  Stopping callbacks.\");\n            }\n\n            // If request wasn't GET\n            else if (xmlhttp.status === 400) {\n                console.log(\"JSCallback Error: Bad request.  Stopping callbacks.\");\n            }\n\n            // If error, revert to polling\n            else {\n                console.log(\"JSCallback Error: Request failed.\");\n                PhoneGap.UsePolling = true;\n                PhoneGap.JSCallbackPolling();\n            }\n        }\n    };\n\n    if (PhoneGap.JSCallbackPort === null) {\n        PhoneGap.JSCallbackPort = prompt(\"getPort\", \"gap_callbackServer:\");\n    }\n    if (PhoneGap.JSCallbackToken === null) {\n        PhoneGap.JSCallbackToken = prompt(\"getToken\", \"gap_callbackServer:\");\n    }\n    xmlhttp.open(\"GET\", \"http://127.0.0.1:\"+PhoneGap.JSCallbackPort+\"/\"+PhoneGap.JSCallbackToken , true);\n    xmlhttp.send();\n};\n\n/**\n * The polling period to use with JSCallbackPolling.\n * This can be changed by the application.  The default is 50ms.\n */\nPhoneGap.JSCallbackPollingPeriod = 50;\n\n/**\n * Flag that can be set by the user to force polling to be used or force XHR to be used.\n */\nPhoneGap.UsePolling = false;    // T=use polling, F=use XHR\n\n/**\n * This is only for Android.\n *\n * Internal function that uses polling to call into PhoneGap Java code and retrieve\n * any JavaScript code that needs to be run.  This is used for callbacks from\n * Java to JavaScript.\n */\nPhoneGap.JSCallbackPolling = function() {\n\n    // Exit if shutting down app\n    if (PhoneGap.shuttingDown) {\n        return;\n    }\n\n    // If polling flag was changed, stop using polling from now on\n    if (!PhoneGap.UsePolling) {\n        PhoneGap.JSCallback();\n        return;\n    }\n\n    var msg = prompt(\"\", \"gap_poll:\");\n    if (msg) {\n        setTimeout(function() {\n            try {\n                var t = eval(\"\"+msg);\n            }\n            catch (e) {\n                console.log(\"JSCallbackPolling: Message from Server: \" + msg);\n                console.log(\"JSCallbackPolling Error: \"+e);\n            }\n        }, 1);\n        setTimeout(PhoneGap.JSCallbackPolling, 1);\n    }\n    else {\n        setTimeout(PhoneGap.JSCallbackPolling, PhoneGap.JSCallbackPollingPeriod);\n    }\n};\n\n/**\n * Create a UUID\n *\n * @return {String}\n */\nPhoneGap.createUUID = function() {\n    return PhoneGap.UUIDcreatePart(4) + '-' +\n        PhoneGap.UUIDcreatePart(2) + '-' +\n        PhoneGap.UUIDcreatePart(2) + '-' +\n        PhoneGap.UUIDcreatePart(2) + '-' +\n        PhoneGap.UUIDcreatePart(6);\n};\n\nPhoneGap.UUIDcreatePart = function(length) {\n    var uuidpart = \"\";\n    var i, uuidchar;\n    for (i=0; i<length; i++) {\n        uuidchar = parseInt((Math.random() * 256),0).toString(16);\n        if (uuidchar.length === 1) {\n            uuidchar = \"0\" + uuidchar;\n        }\n        uuidpart += uuidchar;\n    }\n    return uuidpart;\n};\n\nPhoneGap.close = function(context, func, params) {\n    if (typeof params === 'undefined') {\n        return function() {\n            return func.apply(context, arguments);\n        };\n    } else {\n        return function() {\n            return func.apply(context, params);\n        };\n    }\n};\n\n/**\n * Load a JavaScript file after page has loaded.\n *\n * @param {String} jsfile               The url of the JavaScript file to load.\n * @param {Function} successCallback    The callback to call when the file has been loaded.\n */\nPhoneGap.includeJavascript = function(jsfile, successCallback) {\n    var id = document.getElementsByTagName(\"head\")[0];\n    var el = document.createElement('script');\n    el.type = 'text/javascript';\n    if (typeof successCallback === 'function') {\n        el.onload = successCallback;\n    }\n    el.src = jsfile;\n    id.appendChild(el);\n};\n\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"accelerometer\")) {\nPhoneGap.addResource(\"accelerometer\");\n\n/** @constructor */\nvar Acceleration = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this.timestamp = new Date().getTime();\n};\n\n/**\n * This class provides access to device accelerometer data.\n * @constructor\n */\nvar Accelerometer = function() {\n\n    /**\n     * The last known acceleration.  type=Acceleration()\n     */\n    this.lastAcceleration = null;\n\n    /**\n     * List of accelerometer watch timers\n     */\n    this.timers = {};\n};\n\nAccelerometer.ERROR_MSG = [\"Not running\", \"Starting\", \"\", \"Failed to start\"];\n\n/**\n * Asynchronously aquires the current acceleration.\n *\n * @param {Function} successCallback    The function to call when the acceleration data is available\n * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)\n * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)\n */\nAccelerometer.prototype.getCurrentAcceleration = function(successCallback, errorCallback, options) {\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Accelerometer Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Accelerometer Error: errorCallback is not a function\");\n        return;\n    }\n\n    // Get acceleration\n    PhoneGap.exec(successCallback, errorCallback, \"Accelerometer\", \"getAcceleration\", []);\n};\n\n/**\n * Asynchronously aquires the acceleration repeatedly at a given interval.\n *\n * @param {Function} successCallback    The function to call each time the acceleration data is available\n * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)\n * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)\n * @return String                       The watch id that must be passed to #clearWatch to stop watching.\n */\nAccelerometer.prototype.watchAcceleration = function(successCallback, errorCallback, options) {\n\n    // Default interval (10 sec)\n    var frequency = (options !== undefined)? options.frequency : 10000;\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Accelerometer Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Accelerometer Error: errorCallback is not a function\");\n        return;\n    }\n\n    // Make sure accelerometer timeout > frequency + 10 sec\n    PhoneGap.exec(\n        function(timeout) {\n            if (timeout < (frequency + 10000)) {\n                PhoneGap.exec(null, null, \"Accelerometer\", \"setTimeout\", [frequency + 10000]);\n            }\n        },\n        function(e) { }, \"Accelerometer\", \"getTimeout\", []);\n\n    // Start watch timer\n    var id = PhoneGap.createUUID();\n    navigator.accelerometer.timers[id] = setInterval(function() {\n        PhoneGap.exec(successCallback, errorCallback, \"Accelerometer\", \"getAcceleration\", []);\n    }, (frequency ? frequency : 1));\n\n    return id;\n};\n\n/**\n * Clears the specified accelerometer watch.\n *\n * @param {String} id       The id of the watch returned from #watchAcceleration.\n */\nAccelerometer.prototype.clearWatch = function(id) {\n\n    // Stop javascript timer & remove from timer list\n    if (id && navigator.accelerometer.timers[id] !== undefined) {\n        clearInterval(navigator.accelerometer.timers[id]);\n        delete navigator.accelerometer.timers[id];\n    }\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.accelerometer === \"undefined\") {\n        navigator.accelerometer = new Accelerometer();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"app\")) {\nPhoneGap.addResource(\"app\");\n(function() {\n\n/**\n * Constructor\n * @constructor\n */\nvar App = function() {};\n\n/**\n * Clear the resource cache.\n */\nApp.prototype.clearCache = function() {\n    PhoneGap.exec(null, null, \"App\", \"clearCache\", []);\n};\n\n/**\n * Load the url into the webview.\n *\n * @param url           The URL to load\n * @param props         Properties that can be passed in to the activity:\n *      wait: int                           => wait msec before loading URL\n *      loadingDialog: \"Title,Message\"      => display a native loading dialog\n *      hideLoadingDialogOnPage: boolean    => hide loadingDialog when page loaded instead of when deviceready event occurs.\n *      loadInWebView: boolean              => cause all links on web page to be loaded into existing web view, instead of being loaded into new browser.\n *      loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error\n *      errorUrl: URL                       => URL to load if there's an error loading specified URL with loadUrl().  Should be a local URL such as file:///android_asset/www/error.html\");\n *      keepRunning: boolean                => enable app to keep running in background\n *\n * Example:\n *      App app = new App();\n *      app.loadUrl(\"http://server/myapp/index.html\", {wait:2000, loadingDialog:\"Wait,Loading App\", loadUrlTimeoutValue: 60000});\n */\nApp.prototype.loadUrl = function(url, props) {\n    PhoneGap.exec(null, null, \"App\", \"loadUrl\", [url, props]);\n};\n\n/**\n * Cancel loadUrl that is waiting to be loaded.\n */\nApp.prototype.cancelLoadUrl = function() {\n    PhoneGap.exec(null, null, \"App\", \"cancelLoadUrl\", []);\n};\n\n/**\n * Clear web history in this web view.\n * Instead of BACK button loading the previous web page, it will exit the app.\n */\nApp.prototype.clearHistory = function() {\n    PhoneGap.exec(null, null, \"App\", \"clearHistory\", []);\n};\n\n/**\n * Override the default behavior of the Android back button.\n * If overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n *\n * Note: The user should not have to call this method.  Instead, when the user\n *       registers for the \"backbutton\" event, this is automatically done.\n *\n * @param override\t\tT=override, F=cancel override\n */\nApp.prototype.overrideBackbutton = function(override) {\n    PhoneGap.exec(null, null, \"App\", \"overrideBackbutton\", [override]);\n};\n\n/**\n * Exit and terminate the application.\n */\nApp.prototype.exitApp = function() {\n\treturn PhoneGap.exec(null, null, \"App\", \"exitApp\", []);\n};\n\nPhoneGap.addConstructor(function() {\n    navigator.app = new App();\n});\n}());\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"camera\")) {\nPhoneGap.addResource(\"camera\");\n\n/**\n * This class provides access to the device camera.\n *\n * @constructor\n */\nvar Camera = function() {\n    this.successCallback = null;\n    this.errorCallback = null;\n    this.options = null;\n};\n\n/**\n * Format of image that returned from getPicture.\n *\n * Example: navigator.camera.getPicture(success, fail,\n *              { quality: 80,\n *                destinationType: Camera.DestinationType.DATA_URL,\n *                sourceType: Camera.PictureSourceType.PHOTOLIBRARY})\n */\nCamera.DestinationType = {\n    DATA_URL: 0,                // Return base64 encoded string\n    FILE_URI: 1                 // Return file uri (content://media/external/images/media/2 for Android)\n};\nCamera.prototype.DestinationType = Camera.DestinationType;\n\n/**\n * Encoding of image returned from getPicture.\n *\n * Example: navigator.camera.getPicture(success, fail,\n *              { quality: 80,\n *                destinationType: Camera.DestinationType.DATA_URL,\n *                sourceType: Camera.PictureSourceType.CAMERA,\n *                encodingType: Camera.EncodingType.PNG})\n*/\nCamera.EncodingType = {\n    JPEG: 0,                    // Return JPEG encoded image\n    PNG: 1                      // Return PNG encoded image\n};\nCamera.prototype.EncodingType = Camera.EncodingType;\n\n/**\n * Source to getPicture from.\n *\n * Example: navigator.camera.getPicture(success, fail,\n *              { quality: 80,\n *                destinationType: Camera.DestinationType.DATA_URL,\n *                sourceType: Camera.PictureSourceType.PHOTOLIBRARY})\n */\nCamera.PictureSourceType = {\n    PHOTOLIBRARY : 0,           // Choose image from picture library (same as SAVEDPHOTOALBUM for Android)\n    CAMERA : 1,                 // Take picture from camera\n    SAVEDPHOTOALBUM : 2         // Choose image from picture library (same as PHOTOLIBRARY for Android)\n};\nCamera.prototype.PictureSourceType = Camera.PictureSourceType;\n\n/**\n * Gets a picture from source defined by \"options.sourceType\", and returns the\n * image as defined by the \"options.destinationType\" option.\n\n * The defaults are sourceType=CAMERA and destinationType=DATA_URL.\n *\n * @param {Function} successCallback\n * @param {Function} errorCallback\n * @param {Object} options\n */\nCamera.prototype.getPicture = function(successCallback, errorCallback, options) {\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Camera Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Camera Error: errorCallback is not a function\");\n        return;\n    }\n\n    this.options = options;\n    var quality = 80;\n    if (options.quality) {\n        quality = this.options.quality;\n    }\n    \n    var maxResolution = 0;\n    if (options.maxResolution) {\n    \tmaxResolution = this.options.maxResolution;\n    }\n    \n    var destinationType = Camera.DestinationType.DATA_URL;\n    if (this.options.destinationType) {\n        destinationType = this.options.destinationType;\n    }\n    var sourceType = Camera.PictureSourceType.CAMERA;\n    if (typeof this.options.sourceType === \"number\") {\n        sourceType = this.options.sourceType;\n    }\n    var encodingType = Camera.EncodingType.JPEG;\n    if (typeof options.encodingType == \"number\") {\n        encodingType = this.options.encodingType;\n    }\n    \n    var targetWidth = -1;\n    if (typeof options.targetWidth == \"number\") {\n        targetWidth = options.targetWidth;\n    } else if (typeof options.targetWidth == \"string\") {\n        var width = new Number(options.targetWidth);\n        if (isNaN(width) === false) {\n            targetWidth = width.valueOf();\n        }\n    }\n\n    var targetHeight = -1;\n    if (typeof options.targetHeight == \"number\") {\n        targetHeight = options.targetHeight;\n    } else if (typeof options.targetHeight == \"string\") {\n        var height = new Number(options.targetHeight);\n        if (isNaN(height) === false) {\n            targetHeight = height.valueOf();\n        }\n    }\n    \n    PhoneGap.exec(successCallback, errorCallback, \"Camera\", \"takePicture\", [quality, destinationType, sourceType, targetWidth, targetHeight, encodingType]);\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.camera === \"undefined\") {\n        navigator.camera = new Camera();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"capture\")) {\nPhoneGap.addResource(\"capture\");\n\t\n/**\n * Represents a single file.\n *\n * name {DOMString} name of the file, without path information\n * fullPath {DOMString} the full path of the file, including the name\n * type {DOMString} mime type\n * lastModifiedDate {Date} last modified date\n * size {Number} size of the file in bytes\n */\nvar MediaFile = function(name, fullPath, type, lastModifiedDate, size){\n\tthis.name = name || null;\n\tthis.fullPath = fullPath || null;\n\tthis.type = type || null;\n\tthis.lastModifiedDate = lastModifiedDate || null;\n\tthis.size = size || 0;\n};\n\n/**\n * Launch device camera application for recording video(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n */\nMediaFile.prototype.getFormatData = function(successCallback, errorCallback){\n\tPhoneGap.exec(successCallback, errorCallback, \"Capture\", \"getFormatData\", [this.fullPath, this.type]);\n};\n\n/**\n * MediaFileData encapsulates format information of a media file.\n *\n * @param {DOMString} codecs\n * @param {long} bitrate\n * @param {long} height\n * @param {long} width\n * @param {float} duration\n */\nvar MediaFileData = function(codecs, bitrate, height, width, duration){\n\tthis.codecs = codecs || null;\n\tthis.bitrate = bitrate || 0;\n\tthis.height = height || 0;\n\tthis.width = width || 0;\n\tthis.duration = duration || 0;\n};\n\n/**\n * The CaptureError interface encapsulates all errors in the Capture API.\n */\nvar CaptureError = function(){\n\tthis.code = null;\n};\n\n// Capture error codes\nCaptureError.CAPTURE_INTERNAL_ERR = 0;\nCaptureError.CAPTURE_APPLICATION_BUSY = 1;\nCaptureError.CAPTURE_INVALID_ARGUMENT = 2;\nCaptureError.CAPTURE_NO_MEDIA_FILES = 3;\nCaptureError.CAPTURE_NOT_SUPPORTED = 20;\n\n/**\n * The Capture interface exposes an interface to the camera and microphone of the hosting device.\n */\nvar Capture = function(){\n\tthis.supportedAudioModes = [];\n\tthis.supportedImageModes = [];\n\tthis.supportedVideoModes = [];\n};\n\n/**\n * Launch audio recorder application for recording audio clip(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureAudioOptions} options\n */\nCapture.prototype.captureAudio = function(successCallback, errorCallback, options){\n\tPhoneGap.exec(successCallback, errorCallback, \"Capture\", \"captureAudio\", [options]);\n};\n\n/**\n * Launch camera application for taking image(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureImageOptions} options\n */\nCapture.prototype.captureImage = function(successCallback, errorCallback, options){\n\tPhoneGap.exec(successCallback, errorCallback, \"Capture\", \"captureImage\", [options]);\n};\n\n/**\n * Launch camera application for taking image(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureImageOptions} options\n */\nCapture.prototype._castMediaFile = function(pluginResult){\n\tvar mediaFiles = [];\n\tvar i;\n\tfor (i = 0; i < pluginResult.message.length; i++) {\n\t\tvar mediaFile = new MediaFile();\n\t\tmediaFile.name = pluginResult.message[i].name;\n\t\tmediaFile.fullPath = pluginResult.message[i].fullPath;\n\t\tmediaFile.type = pluginResult.message[i].type;\n\t\tmediaFile.lastModifiedDate = pluginResult.message[i].lastModifiedDate;\n\t\tmediaFile.size = pluginResult.message[i].size;\n\t\tmediaFiles.push(mediaFile);\n\t}\n\tpluginResult.message = mediaFiles;\n\treturn pluginResult;\n};\n\n/**\n * Launch device camera application for recording video(s).\n *\n * @param {Function} successCB\n * @param {Function} errorCB\n * @param {CaptureVideoOptions} options\n */\nCapture.prototype.captureVideo = function(successCallback, errorCallback, options){\n\tPhoneGap.exec(successCallback, errorCallback, \"Capture\", \"captureVideo\", [options]);\n};\n\n/**\n * Encapsulates a set of parameters that the capture device supports.\n */\nvar ConfigurationData = function(){\n\t// The ASCII-encoded string in lower case representing the media type. \n\tthis.type = null;\n\t// The height attribute represents height of the image or video in pixels. \n\t// In the case of a sound clip this attribute has value 0. \n\tthis.height = 0;\n\t// The width attribute represents width of the image or video in pixels. \n\t// In the case of a sound clip this attribute has value 0\n\tthis.width = 0;\n};\n\n/**\n * Encapsulates all image capture operation configuration options.\n */\nvar CaptureImageOptions = function(){\n\t// Upper limit of images user can take. Value must be equal or greater than 1.\n\tthis.limit = 1;\n\t// The selected image mode. Must match with one of the elements in supportedImageModes array.\n\tthis.mode = null;\n};\n\n/**\n * Encapsulates all video capture operation configuration options.\n */\nvar CaptureVideoOptions = function(){\n\t// Upper limit of videos user can record. Value must be equal or greater than 1.\n\tthis.limit = 1;\n\t// Maximum duration of a single video clip in seconds.\n\tthis.duration = 0;\n\t// The selected video mode. Must match with one of the elements in supportedVideoModes array.\n\tthis.mode = null;\n};\n\n/**\n * Encapsulates all audio capture operation configuration options.\n */\nvar CaptureAudioOptions = function(){\n\t// Upper limit of sound clips user can record. Value must be equal or greater than 1.\n\tthis.limit = 1;\n\t// Maximum duration of a single sound clip in seconds.\n\tthis.duration = 0;\n\t// The selected audio mode. Must match with one of the elements in supportedAudioModes array.\n\tthis.mode = null;\n};\n\nPhoneGap.addConstructor(function(){\n\tif (typeof navigator.device === \"undefined\") {\n\t\tnavigator.device = window.device = new Device();\n\t}\n\tif (typeof navigator.device.capture === \"undefined\") {\n\t\tnavigator.device.capture = window.device.capture = new Capture();\n\t}\n});\n}/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"compass\")) {\nPhoneGap.addResource(\"compass\");\n\n/**\n * This class provides access to device Compass data.\n * @constructor\n */\nvar Compass = function() {\n    /**\n     * The last known Compass position.\n     */\n    this.lastHeading = null;\n\n    /**\n     * List of compass watch timers\n     */\n    this.timers = {};\n};\n\nCompass.ERROR_MSG = [\"Not running\", \"Starting\", \"\", \"Failed to start\"];\n\n/**\n * Asynchronously aquires the current heading.\n *\n * @param {Function} successCallback The function to call when the heading data is available\n * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)\n * @param {PositionOptions} options The options for getting the heading data such as timeout. (OPTIONAL)\n */\nCompass.prototype.getCurrentHeading = function(successCallback, errorCallback, options) {\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Compass Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Compass Error: errorCallback is not a function\");\n        return;\n    }\n\n    // Get heading\n    PhoneGap.exec(successCallback, errorCallback, \"Compass\", \"getHeading\", []);\n};\n\n/**\n * Asynchronously aquires the heading repeatedly at a given interval.\n *\n * @param {Function} successCallback    The function to call each time the heading data is available\n * @param {Function} errorCallback      The function to call when there is an error getting the heading data. (OPTIONAL)\n * @param {HeadingOptions} options      The options for getting the heading data such as timeout and the frequency of the watch. (OPTIONAL)\n * @return String                       The watch id that must be passed to #clearWatch to stop watching.\n */\nCompass.prototype.watchHeading= function(successCallback, errorCallback, options) {\n\n    // Default interval (100 msec)\n    var frequency = (options !== undefined) ? options.frequency : 100;\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Compass Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Compass Error: errorCallback is not a function\");\n        return;\n    }\n\n    // Make sure compass timeout > frequency + 10 sec\n    PhoneGap.exec(\n        function(timeout) {\n            if (timeout < (frequency + 10000)) {\n                PhoneGap.exec(null, null, \"Compass\", \"setTimeout\", [frequency + 10000]);\n            }\n        },\n        function(e) { }, \"Compass\", \"getTimeout\", []);\n\n    // Start watch timer to get headings\n    var id = PhoneGap.createUUID();\n    navigator.compass.timers[id] = setInterval(\n        function() {\n            PhoneGap.exec(successCallback, errorCallback, \"Compass\", \"getHeading\", []);\n        }, (frequency ? frequency : 1));\n\n    return id;\n};\n\n\n/**\n * Clears the specified heading watch.\n *\n * @param {String} id       The ID of the watch returned from #watchHeading.\n */\nCompass.prototype.clearWatch = function(id) {\n\n    // Stop javascript timer & remove from timer list\n    if (id && navigator.compass.timers[id]) {\n        clearInterval(navigator.compass.timers[id]);\n        delete navigator.compass.timers[id];\n    }\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.compass === \"undefined\") {\n        navigator.compass = new Compass();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"contact\")) {\nPhoneGap.addResource(\"contact\");\n\n/**\n* Contains information about a single contact.\n* @constructor\n* @param {DOMString} id unique identifier\n* @param {DOMString} displayName\n* @param {ContactName} name\n* @param {DOMString} nickname\n* @param {Array.<ContactField>} phoneNumbers array of phone numbers\n* @param {Array.<ContactField>} emails array of email addresses\n* @param {Array.<ContactAddress>} addresses array of addresses\n* @param {Array.<ContactField>} ims instant messaging user ids\n* @param {Array.<ContactOrganization>} organizations\n* @param {DOMString} birthday contact's birthday\n* @param {DOMString} note user notes about contact\n* @param {Array.<ContactField>} photos\n* @param {Array.<ContactField>} categories\n* @param {Array.<ContactField>} urls contact's web sites\n*/\nvar Contact = function (id, displayName, name, nickname, phoneNumbers, emails, addresses,\n    ims, organizations, birthday, note, photos, categories, urls) {\n    this.id = id || null;\n    this.rawId = null;\n    this.displayName = displayName || null;\n    this.name = name || null; // ContactName\n    this.nickname = nickname || null;\n    this.phoneNumbers = phoneNumbers || null; // ContactField[]\n    this.emails = emails || null; // ContactField[]\n    this.addresses = addresses || null; // ContactAddress[]\n    this.ims = ims || null; // ContactField[]\n    this.organizations = organizations || null; // ContactOrganization[]\n    this.birthday = birthday || null;\n    this.note = note || null;\n    this.photos = photos || null; // ContactField[]\n    this.categories = categories || null; // ContactField[]\n    this.urls = urls || null; // ContactField[]\n};\n\n/**\n *  ContactError.\n *  An error code assigned by an implementation when an error has occurreds\n * @constructor\n */\nvar ContactError = function() {\n    this.code=null;\n};\n\n/**\n * Error codes\n */\nContactError.UNKNOWN_ERROR = 0;\nContactError.INVALID_ARGUMENT_ERROR = 1;\nContactError.TIMEOUT_ERROR = 2;\nContactError.PENDING_OPERATION_ERROR = 3;\nContactError.IO_ERROR = 4;\nContactError.NOT_SUPPORTED_ERROR = 5;\nContactError.PERMISSION_DENIED_ERROR = 20;\n\n/**\n* Removes contact from device storage.\n* @param successCB success callback\n* @param errorCB error callback\n*/\nContact.prototype.remove = function(successCB, errorCB) {\n    if (this.id === null) {\n        var errorObj = new ContactError();\n        errorObj.code = ContactError.UNKNOWN_ERROR;\n        errorCB(errorObj);\n    }\n    else {\n        PhoneGap.exec(successCB, errorCB, \"Contacts\", \"remove\", [this.id]);\n    }\n};\n\n/**\n* Creates a deep copy of this Contact.\n* With the contact ID set to null.\n* @return copy of this Contact\n*/\nContact.prototype.clone = function() {\n    var clonedContact = PhoneGap.clone(this);\n    var i;\n    clonedContact.id = null;\n    clonedContact.rawId = null;\n    // Loop through and clear out any id's in phones, emails, etc.\n    if (clonedContact.phoneNumbers) {\n        for (i = 0; i < clonedContact.phoneNumbers.length; i++) {\n            clonedContact.phoneNumbers[i].id = null;\n        }\n    }\n    if (clonedContact.emails) {\n        for (i = 0; i < clonedContact.emails.length; i++) {\n            clonedContact.emails[i].id = null;\n        }\n    }\n    if (clonedContact.addresses) {\n        for (i = 0; i < clonedContact.addresses.length; i++) {\n            clonedContact.addresses[i].id = null;\n        }\n    }\n    if (clonedContact.ims) {\n        for (i = 0; i < clonedContact.ims.length; i++) {\n            clonedContact.ims[i].id = null;\n        }\n    }\n    if (clonedContact.organizations) {\n        for (i = 0; i < clonedContact.organizations.length; i++) {\n            clonedContact.organizations[i].id = null;\n        }\n    }\n    if (clonedContact.tags) {\n        for (i = 0; i < clonedContact.tags.length; i++) {\n            clonedContact.tags[i].id = null;\n        }\n    }\n    if (clonedContact.photos) {\n        for (i = 0; i < clonedContact.photos.length; i++) {\n            clonedContact.photos[i].id = null;\n        }\n    }\n    if (clonedContact.urls) {\n        for (i = 0; i < clonedContact.urls.length; i++) {\n            clonedContact.urls[i].id = null;\n        }\n    }\n    return clonedContact;\n};\n\n/**\n* Persists contact to device storage.\n* @param successCB success callback\n* @param errorCB error callback\n*/\nContact.prototype.save = function(successCB, errorCB) {\n    PhoneGap.exec(successCB, errorCB, \"Contacts\", \"save\", [this]);\n};\n\n/**\n* Contact name.\n* @constructor\n* @param formatted\n* @param familyName\n* @param givenName\n* @param middle\n* @param prefix\n* @param suffix\n*/\nvar ContactName = function(formatted, familyName, givenName, middle, prefix, suffix) {\n    this.formatted = formatted || null;\n    this.familyName = familyName || null;\n    this.givenName = givenName || null;\n    this.middleName = middle || null;\n    this.honorificPrefix = prefix || null;\n    this.honorificSuffix = suffix || null;\n};\n\n/**\n* Generic contact field.\n* @constructor\n* @param {DOMString} id unique identifier, should only be set by native code\n* @param type\n* @param value\n* @param pref\n*/\nvar ContactField = function(type, value, pref) {\n\tthis.id = null;\n    this.type = type || null;\n    this.value = value || null;\n    this.pref = pref || null;\n};\n\n/**\n* Contact address.\n* @constructor\n* @param {DOMString} id unique identifier, should only be set by native code\n* @param formatted\n* @param streetAddress\n* @param locality\n* @param region\n* @param postalCode\n* @param country\n*/\nvar ContactAddress = function(pref, type, formatted, streetAddress, locality, region, postalCode, country) {\n\tthis.id = null;\n    this.pref = pref || null;\n    this.type = type || null;\n    this.formatted = formatted || null;\n    this.streetAddress = streetAddress || null;\n    this.locality = locality || null;\n    this.region = region || null;\n    this.postalCode = postalCode || null;\n    this.country = country || null;\n};\n\n/**\n* Contact organization.\n* @constructor\n* @param {DOMString} id unique identifier, should only be set by native code\n* @param name\n* @param dept\n* @param title\n* @param startDate\n* @param endDate\n* @param location\n* @param desc\n*/\nvar ContactOrganization = function(pref, type, name, dept, title) {\n\tthis.id = null;\n    this.pref = pref || null;\n    this.type = type || null;\n    this.name = name || null;\n    this.department = dept || null;\n    this.title = title || null;\n};\n\n/**\n* Represents a group of Contacts.\n* @constructor\n*/\nvar Contacts = function() {\n    this.inProgress = false;\n    this.records = [];\n};\n/**\n* Returns an array of Contacts matching the search criteria.\n* @param fields that should be searched\n* @param successCB success callback\n* @param errorCB error callback\n* @param {ContactFindOptions} options that can be applied to contact searching\n* @return array of Contacts matching search criteria\n*/\nContacts.prototype.find = function(fields, successCB, errorCB, options) {\n    if (successCB === null) {\n        throw new TypeError(\"You must specify a success callback for the find command.\");\n    }\n    if (fields === null || fields === \"undefined\" || fields.length === \"undefined\" || fields.length <= 0) {\n        if (typeof errorCB === \"function\") {\n            errorCB({\"code\": ContactError.INVALID_ARGUMENT_ERROR});\n        }\n    } else {\n        PhoneGap.exec(successCB, errorCB, \"Contacts\", \"search\", [fields, options]);        \n    }\n};\n\n/**\n* This function creates a new contact, but it does not persist the contact\n* to device storage. To persist the contact to device storage, invoke\n* contact.save().\n* @param properties an object who's properties will be examined to create a new Contact\n* @returns new Contact object\n*/\nContacts.prototype.create = function(properties) {\n    var i;\n\tvar contact = new Contact();\n    for (i in properties) {\n        if (contact[i] !== 'undefined') {\n            contact[i] = properties[i];\n        }\n    }\n    return contact;\n};\n\n/**\n* This function returns and array of contacts.  It is required as we need to convert raw\n* JSON objects into concrete Contact objects.  Currently this method is called after\n* navigator.contacts.find but before the find methods success call back.\n*\n* @param jsonArray an array of JSON Objects that need to be converted to Contact objects.\n* @returns an array of Contact objects\n*/\nContacts.prototype.cast = function(pluginResult) {\n\tvar contacts = [];\n\tvar i;\n\tfor (i=0; i<pluginResult.message.length; i++) {\n\t\tcontacts.push(navigator.contacts.create(pluginResult.message[i]));\n\t}\n\tpluginResult.message = contacts;\n\treturn pluginResult;\n};\n\n/**\n * ContactFindOptions.\n * @constructor\n * @param filter used to match contacts against\n * @param multiple boolean used to determine if more than one contact should be returned\n */\nvar ContactFindOptions = function(filter, multiple) {\n    this.filter = filter || '';\n    this.multiple = multiple || false;\n};\n\n/**\n * Add the contact interface into the browser.\n */\nPhoneGap.addConstructor(function() {\n    if(typeof navigator.contacts === \"undefined\") {\n        navigator.contacts = new Contacts();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\n// TODO: Needs to be commented\n\nif (!PhoneGap.hasResource(\"crypto\")) {\nPhoneGap.addResource(\"crypto\");\n\n/**\n* @constructor\n*/\nvar Crypto = function() {\n};\n\nCrypto.prototype.encrypt = function(seed, string, callback) {\n    this.encryptWin = callback;\n    PhoneGap.exec(null, null, \"Crypto\", \"encrypt\", [seed, string]);\n};\n\nCrypto.prototype.decrypt = function(seed, string, callback) {\n    this.decryptWin = callback;\n    PhoneGap.exec(null, null, \"Crypto\", \"decrypt\", [seed, string]);\n};\n\nCrypto.prototype.gotCryptedString = function(string) {\n    this.encryptWin(string);\n};\n\nCrypto.prototype.getPlainString = function(string) {\n    this.decryptWin(string);\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.Crypto === \"undefined\") {\n        navigator.Crypto = new Crypto();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"device\")) {\nPhoneGap.addResource(\"device\");\n\n/**\n * This represents the mobile device, and provides properties for inspecting the model, version, UUID of the\n * phone, etc.\n * @constructor\n */\nvar Device = function() {\n    this.available = PhoneGap.available;\n    this.platform = null;\n    this.version = null;\n    this.name = null;\n    this.uuid = null;\n    this.phonegap = null;\n\n    var me = this;\n    this.getInfo(\n        function(info) {\n            me.available = true;\n            me.platform = info.platform;\n            me.version = info.version;\n            me.name = info.name;\n            me.uuid = info.uuid;\n            me.phonegap = info.phonegap;\n            PhoneGap.onPhoneGapInfoReady.fire();\n        },\n        function(e) {\n            me.available = false;\n            console.log(\"Error initializing PhoneGap: \" + e);\n            alert(\"Error initializing PhoneGap: \"+e);\n        });\n};\n\n/**\n * Get device info\n *\n * @param {Function} successCallback The function to call when the heading data is available\n * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)\n */\nDevice.prototype.getInfo = function(successCallback, errorCallback) {\n\n    // successCallback required\n    if (typeof successCallback !== \"function\") {\n        console.log(\"Device Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Device Error: errorCallback is not a function\");\n        return;\n    }\n\n    // Get info\n    PhoneGap.exec(successCallback, errorCallback, \"Device\", \"getDeviceInfo\", []);\n};\n\n/*\n * DEPRECATED\n * This is only for Android.\n *\n * You must explicitly override the back button.\n */\nDevice.prototype.overrideBackButton = function() {\n\tconsole.log(\"Device.overrideBackButton() is deprecated.  Use App.overrideBackbutton(true).\");\n\tnavigator.app.overrideBackbutton(true);\n};\n\n/*\n * DEPRECATED\n * This is only for Android.\n *\n * This resets the back button to the default behaviour\n */\nDevice.prototype.resetBackButton = function() {\n\tconsole.log(\"Device.resetBackButton() is deprecated.  Use App.overrideBackbutton(false).\");\n\tnavigator.app.overrideBackbutton(false);\n};\n\n/*\n * DEPRECATED\n * This is only for Android.\n *\n * This terminates the activity!\n */\nDevice.prototype.exitApp = function() {\n\tconsole.log(\"Device.exitApp() is deprecated.  Use App.exitApp().\");\n\tnavigator.app.exitApp();\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.device === \"undefined\") {\n        navigator.device = window.device = new Device();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"file\")) {\nPhoneGap.addResource(\"file\");\n\n/**\n * This class provides some useful information about a file.\n * This is the fields returned when navigator.fileMgr.getFileProperties()\n * is called.\n * @constructor\n */\nvar FileProperties = function(filePath) {\n    this.filePath = filePath;\n    this.size = 0;\n    this.lastModifiedDate = null;\n};\n\n/**\n * Represents a single file.\n *\n * @constructor\n * @param name {DOMString} name of the file, without path information\n * @param fullPath {DOMString} the full path of the file, including the name\n * @param type {DOMString} mime type\n * @param lastModifiedDate {Date} last modified date\n * @param size {Number} size of the file in bytes\n */\nvar File = function(name, fullPath, type, lastModifiedDate, size) {\n\tthis.name = name || null;\n    this.fullPath = fullPath || null;\n\tthis.type = type || null;\n    this.lastModifiedDate = lastModifiedDate || null;\n    this.size = size || 0;\n};\n\n/** @constructor */\nvar FileError = function() {\n   this.code = null;\n};\n\n// File error codes\n// Found in DOMException\nFileError.NOT_FOUND_ERR = 1;\nFileError.SECURITY_ERR = 2;\nFileError.ABORT_ERR = 3;\n\n// Added by this specification\nFileError.NOT_READABLE_ERR = 4;\nFileError.ENCODING_ERR = 5;\nFileError.NO_MODIFICATION_ALLOWED_ERR = 6;\nFileError.INVALID_STATE_ERR = 7;\nFileError.SYNTAX_ERR = 8;\nFileError.INVALID_MODIFICATION_ERR = 9;\nFileError.QUOTA_EXCEEDED_ERR = 10;\nFileError.TYPE_MISMATCH_ERR = 11;\nFileError.PATH_EXISTS_ERR = 12;\n\n//-----------------------------------------------------------------------------\n// File manager\n//-----------------------------------------------------------------------------\n\n/** @constructor */\nvar FileMgr = function() {\n};\n\nFileMgr.prototype.getFileProperties = function(filePath) {\n    return PhoneGap.exec(null, null, \"File\", \"getFileProperties\", [filePath]);\n};\n\nFileMgr.prototype.getFileBasePaths = function() {\n};\n\nFileMgr.prototype.testSaveLocationExists = function(successCallback, errorCallback) {\n    return PhoneGap.exec(successCallback, errorCallback, \"File\", \"testSaveLocationExists\", []);\n};\n\nFileMgr.prototype.testFileExists = function(fileName, successCallback, errorCallback) {\n    return PhoneGap.exec(successCallback, errorCallback, \"File\", \"testFileExists\", [fileName]);\n};\n\nFileMgr.prototype.testDirectoryExists = function(dirName, successCallback, errorCallback) {\n    return PhoneGap.exec(successCallback, errorCallback, \"File\", \"testDirectoryExists\", [dirName]);\n};\n\nFileMgr.prototype.getFreeDiskSpace = function(successCallback, errorCallback) {\n    return PhoneGap.exec(successCallback, errorCallback, \"File\", \"getFreeDiskSpace\", []);\n};\n\nFileMgr.prototype.write = function(fileName, data, position, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"write\", [fileName, data, position]);\n};\n\nFileMgr.prototype.truncate = function(fileName, size, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"truncate\", [fileName, size]);\n};\n\nFileMgr.prototype.readAsText = function(fileName, encoding, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"readAsText\", [fileName, encoding]);\n};\n\nFileMgr.prototype.readAsDataURL = function(fileName, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"readAsDataURL\", [fileName]);\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.fileMgr === \"undefined\") {\n        navigator.fileMgr = new FileMgr();\n    }\n});\n\n//-----------------------------------------------------------------------------\n// File Reader\n//-----------------------------------------------------------------------------\n// TODO: All other FileMgr function operate on the SD card as root.  However,\n//       for FileReader & FileWriter the root is not SD card.  Should this be changed?\n\n/**\n * This class reads the mobile device file system.\n *\n * For Android:\n *      The root directory is the root of the file system.\n *      To read from the SD card, the file name is \"sdcard/my_file.txt\"\n * @constructor\n */\nvar FileReader = function() {\n    this.fileName = \"\";\n\n    this.readyState = 0;\n\n    // File data\n    this.result = null;\n\n    // Error\n    this.error = null;\n\n    // Event handlers\n    this.onloadstart = null;    // When the read starts.\n    this.onprogress = null;     // While reading (and decoding) file or fileBlob data, and reporting partial file data (progess.loaded/progress.total)\n    this.onload = null;         // When the read has successfully completed.\n    this.onerror = null;        // When the read has failed (see errors).\n    this.onloadend = null;      // When the request has completed (either in success or failure).\n    this.onabort = null;        // When the read has been aborted. For instance, by invoking the abort() method.\n};\n\n// States\nFileReader.EMPTY = 0;\nFileReader.LOADING = 1;\nFileReader.DONE = 2;\n\n/**\n * Abort reading file.\n */\nFileReader.prototype.abort = function() {\n    var evt;\n    this.readyState = FileReader.DONE;\n    this.result = null;\n\n    // set error\n    var error = new FileError();\n    error.code = error.ABORT_ERR;\n    this.error = error;\n\n    // If error callback\n    if (typeof this.onerror === \"function\") {\n        this.onerror({\"type\":\"error\", \"target\":this});\n    }\n    // If abort callback\n    if (typeof this.onabort === \"function\") {\n        this.oneabort({\"type\":\"abort\", \"target\":this});\n    }\n    // If load end callback\n    if (typeof this.onloadend === \"function\") {\n        this.onloadend({\"type\":\"loadend\", \"target\":this});\n    }\n};\n\n/**\n * Read text file.\n *\n * @param file          {File} File object containing file properties\n * @param encoding      [Optional] (see http://www.iana.org/assignments/character-sets)\n */\nFileReader.prototype.readAsText = function(file, encoding) {\n    this.fileName = \"\";\n\tif (typeof file.fullPath === \"undefined\") {\n\t\tthis.fileName = file;\n\t} else {\n\t\tthis.fileName = file.fullPath;\n\t}\n\n    // LOADING state\n    this.readyState = FileReader.LOADING;\n\n    // If loadstart callback\n    if (typeof this.onloadstart === \"function\") {\n        this.onloadstart({\"type\":\"loadstart\", \"target\":this});\n    }\n\n    // Default encoding is UTF-8\n    var enc = encoding ? encoding : \"UTF-8\";\n\n    var me = this;\n\n    // Read file\n    navigator.fileMgr.readAsText(this.fileName, enc,\n\n        // Success callback\n        function(r) {\n            var evt;\n\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileReader.DONE) {\n                return;\n            }\n\n            // Save result\n            me.result = r;\n\n            // If onload callback\n            if (typeof me.onload === \"function\") {\n                me.onload({\"type\":\"load\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileReader.DONE;\n\n            // If onloadend callback\n            if (typeof me.onloadend === \"function\") {\n                me.onloadend({\"type\":\"loadend\", \"target\":me});\n            }\n        },\n\n        // Error callback\n        function(e) {\n            var evt;\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileReader.DONE) {\n                return;\n            }\n\n            // Save error\n\t\t    me.error = e;\n\n            // If onerror callback\n            if (typeof me.onerror === \"function\") {\n                me.onerror({\"type\":\"error\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileReader.DONE;\n\n            // If onloadend callback\n            if (typeof me.onloadend === \"function\") {\n                me.onloadend({\"type\":\"loadend\", \"target\":me});\n            }\n        }\n        );\n};\n\n\n/**\n * Read file and return data as a base64 encoded data url.\n * A data url is of the form:\n *      data:[<mediatype>][;base64],<data>\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsDataURL = function(file) {\n\tthis.fileName = \"\";\n    if (typeof file.fullPath === \"undefined\") {\n        this.fileName = file;\n    } else {\n        this.fileName = file.fullPath;\n    }\n\n    // LOADING state\n    this.readyState = FileReader.LOADING;\n\n    // If loadstart callback\n    if (typeof this.onloadstart === \"function\") {\n        this.onloadstart({\"type\":\"loadstart\", \"target\":this});\n    }\n\n    var me = this;\n\n    // Read file\n    navigator.fileMgr.readAsDataURL(this.fileName,\n\n        // Success callback\n        function(r) {\n            var evt;\n\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileReader.DONE) {\n                return;\n            }\n\n            // Save result\n            me.result = r;\n\n            // If onload callback\n            if (typeof me.onload === \"function\") {\n                me.onload({\"type\":\"load\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileReader.DONE;\n\n            // If onloadend callback\n            if (typeof me.onloadend === \"function\") {\n                me.onloadend({\"type\":\"loadend\", \"target\":me});\n            }\n        },\n\n        // Error callback\n        function(e) {\n            var evt;\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileReader.DONE) {\n                return;\n            }\n\n            // Save error\n            me.error = e;\n\n            // If onerror callback\n            if (typeof me.onerror === \"function\") {\n                me.onerror({\"type\":\"error\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileReader.DONE;\n\n            // If onloadend callback\n            if (typeof me.onloadend === \"function\") {\n                me.onloadend({\"type\":\"loadend\", \"target\":me});\n            }\n        }\n        );\n};\n\n/**\n * Read file and return data as a binary data.\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsBinaryString = function(file) {\n    // TODO - Can't return binary data to browser.\n    this.fileName = file;\n};\n\n/**\n * Read file and return data as a binary data.\n *\n * @param file          {File} File object containing file properties\n */\nFileReader.prototype.readAsArrayBuffer = function(file) {\n    // TODO - Can't return binary data to browser.\n    this.fileName = file;\n};\n\n//-----------------------------------------------------------------------------\n// File Writer\n//-----------------------------------------------------------------------------\n\n/**\n * This class writes to the mobile device file system.\n *\n * For Android:\n *      The root directory is the root of the file system.\n *      To write to the SD card, the file name is \"sdcard/my_file.txt\"\n *\n * @constructor\n * @param file {File} File object containing file properties\n * @param append if true write to the end of the file, otherwise overwrite the file\n */\nvar FileWriter = function(file) {\n    this.fileName = \"\";\n    this.length = 0;\n\tif (file) {\n\t    this.fileName = file.fullPath || file;\n\t    this.length = file.size || 0;\n\t}\n    // default is to write at the beginning of the file\n    this.position = 0;\n\n    this.readyState = 0; // EMPTY\n\n    this.result = null;\n\n    // Error\n    this.error = null;\n\n    // Event handlers\n    this.onwritestart = null;\t// When writing starts\n    this.onprogress = null;\t\t// While writing the file, and reporting partial file data\n    this.onwrite = null;\t\t// When the write has successfully completed.\n    this.onwriteend = null;\t\t// When the request has completed (either in success or failure).\n    this.onabort = null;\t\t// When the write has been aborted. For instance, by invoking the abort() method.\n    this.onerror = null;\t\t// When the write has failed (see errors).\n};\n\n// States\nFileWriter.INIT = 0;\nFileWriter.WRITING = 1;\nFileWriter.DONE = 2;\n\n/**\n * Abort writing file.\n */\nFileWriter.prototype.abort = function() {\n    // check for invalid state\n\tif (this.readyState === FileWriter.DONE || this.readyState === FileWriter.INIT) {\n\t\tthrow FileError.INVALID_STATE_ERR;\n\t}\n\n    // set error\n    var error = new FileError(), evt;\n    error.code = error.ABORT_ERR;\n    this.error = error;\n\n    // If error callback\n    if (typeof this.onerror === \"function\") {\n        this.onerror({\"type\":\"error\", \"target\":this});\n    }\n    // If abort callback\n    if (typeof this.onabort === \"function\") {\n        this.oneabort({\"type\":\"abort\", \"target\":this});\n    }\n\n    this.readyState = FileWriter.DONE;\n\n    // If write end callback\n    if (typeof this.onwriteend == \"function\") {\n        this.onwriteend({\"type\":\"writeend\", \"target\":this});\n    }\n};\n\n/**\n * Writes data to the file\n *\n * @param text to be written\n */\nFileWriter.prototype.write = function(text) {\n\t// Throw an exception if we are already writing a file\n\tif (this.readyState === FileWriter.WRITING) {\n\t\tthrow FileError.INVALID_STATE_ERR;\n\t}\n\n    // WRITING state\n    this.readyState = FileWriter.WRITING;\n\n    var me = this;\n\n    // If onwritestart callback\n    if (typeof me.onwritestart === \"function\") {\n        me.onwritestart({\"type\":\"writestart\", \"target\":me});\n    }\n\n    // Write file\n    navigator.fileMgr.write(this.fileName, text, this.position,\n\n        // Success callback\n        function(r) {\n            var evt;\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileWriter.DONE) {\n                return;\n            }\n\n            // position always increases by bytes written because file would be extended\n            me.position += r;\n            // The length of the file is now where we are done writing.\n            me.length = me.position;\n\n            // If onwrite callback\n            if (typeof me.onwrite === \"function\") {\n                me.onwrite({\"type\":\"write\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileWriter.DONE;\n\n            // If onwriteend callback\n            if (typeof me.onwriteend === \"function\") {\n                me.onwriteend({\"type\":\"writeend\", \"target\":me});\n            }\n        },\n\n        // Error callback\n        function(e) {\n            var evt;\n\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileWriter.DONE) {\n                return;\n            }\n\n            // Save error\n            me.error = e;\n\n            // If onerror callback\n            if (typeof me.onerror === \"function\") {\n                me.onerror({\"type\":\"error\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileWriter.DONE;\n\n            // If onwriteend callback\n            if (typeof me.onwriteend === \"function\") {\n                me.onwriteend({\"type\":\"writeend\", \"target\":me});\n            }\n        }\n        );\n\n};\n\n/**\n * Moves the file pointer to the location specified.\n *\n * If the offset is a negative number the position of the file\n * pointer is rewound.  If the offset is greater than the file\n * size the position is set to the end of the file.\n *\n * @param offset is the location to move the file pointer to.\n */\nFileWriter.prototype.seek = function(offset) {\n    // Throw an exception if we are already writing a file\n    if (this.readyState === FileWriter.WRITING) {\n        throw FileError.INVALID_STATE_ERR;\n    }\n\n    if (!offset) {\n        return;\n    }\n\n    // See back from end of file.\n    if (offset < 0) {\n\t\tthis.position = Math.max(offset + this.length, 0);\n\t}\n    // Offset is bigger then file size so set position\n    // to the end of the file.\n\telse if (offset > this.length) {\n\t\tthis.position = this.length;\n\t}\n    // Offset is between 0 and file size so set the position\n    // to start writing.\n\telse {\n\t\tthis.position = offset;\n\t}\n};\n\n/**\n * Truncates the file to the size specified.\n *\n * @param size to chop the file at.\n */\nFileWriter.prototype.truncate = function(size) {\n\t// Throw an exception if we are already writing a file\n\tif (this.readyState === FileWriter.WRITING) {\n\t\tthrow FileError.INVALID_STATE_ERR;\n\t}\n\n    // WRITING state\n    this.readyState = FileWriter.WRITING;\n\n    var me = this;\n\n    // If onwritestart callback\n    if (typeof me.onwritestart === \"function\") {\n        me.onwritestart({\"type\":\"writestart\", \"target\":this});\n    }\n\n    // Write file\n    navigator.fileMgr.truncate(this.fileName, size,\n\n        // Success callback\n        function(r) {\n            var evt;\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileWriter.DONE) {\n                return;\n            }\n\n            // Update the length of the file\n            me.length = r;\n            me.position = Math.min(me.position, r);\n\n            // If onwrite callback\n            if (typeof me.onwrite === \"function\") {\n                me.onwrite({\"type\":\"write\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileWriter.DONE;\n\n            // If onwriteend callback\n            if (typeof me.onwriteend === \"function\") {\n                me.onwriteend({\"type\":\"writeend\", \"target\":me});\n            }\n        },\n\n        // Error callback\n        function(e) {\n            var evt;\n            // If DONE (cancelled), then don't do anything\n            if (me.readyState === FileWriter.DONE) {\n                return;\n            }\n\n            // Save error\n            me.error = e;\n\n            // If onerror callback\n            if (typeof me.onerror === \"function\") {\n                me.onerror({\"type\":\"error\", \"target\":me});\n            }\n\n            // DONE state\n            me.readyState = FileWriter.DONE;\n\n            // If onwriteend callback\n            if (typeof me.onwriteend === \"function\") {\n                me.onwriteend({\"type\":\"writeend\", \"target\":me});\n            }\n        }\n    );\n};\n\n/**\n * Information about the state of the file or directory\n *\n * @constructor\n * {Date} modificationTime (readonly)\n */\nvar Metadata = function() {\n    this.modificationTime=null;\n};\n\n/**\n * Supplies arguments to methods that lookup or create files and directories\n *\n * @constructor\n * @param {boolean} create file or directory if it doesn't exist\n * @param {boolean} exclusive if true the command will fail if the file or directory exists\n */\nvar Flags = function(create, exclusive) {\n    this.create = create || false;\n    this.exclusive = exclusive || false;\n};\n\n/**\n * An interface representing a file system\n *\n * @constructor\n * {DOMString} name the unique name of the file system (readonly)\n * {DirectoryEntry} root directory of the file system (readonly)\n */\nvar FileSystem = function() {\n    this.name = null;\n    this.root = null;\n};\n\n/**\n * An interface that lists the files and directories in a directory.\n * @constructor\n */\nvar DirectoryReader = function(fullPath){\n    this.fullPath = fullPath || null;\n};\n\n/**\n * Returns a list of entries from a directory.\n *\n * @param {Function} successCallback is called with a list of entries\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryReader.prototype.readEntries = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"readEntries\", [this.fullPath]);\n};\n\n/**\n * An interface representing a directory on the file system.\n *\n * @constructor\n * {boolean} isFile always false (readonly)\n * {boolean} isDirectory always true (readonly)\n * {DOMString} name of the directory, excluding the path leading to it (readonly)\n * {DOMString} fullPath the absolute full path to the directory (readonly)\n * {FileSystem} filesystem on which the directory resides (readonly)\n */\nvar DirectoryEntry = function() {\n    this.isFile = false;\n    this.isDirectory = true;\n    this.name = null;\n    this.fullPath = null;\n    this.filesystem = null;\n};\n\n/**\n * Copies a directory to a new location\n *\n * @param {DirectoryEntry} parent the directory to which to copy the entry\n * @param {DOMString} newName the new name of the entry, defaults to the current name\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.copyTo = function(parent, newName, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"copyTo\", [this.fullPath, parent, newName]);\n};\n\n/**\n * Looks up the metadata of the entry\n *\n * @param {Function} successCallback is called with a Metadata object\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getMetadata = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getMetadata\", [this.fullPath]);\n};\n\n/**\n * Gets the parent of the entry\n *\n * @param {Function} successCallback is called with a parent entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getParent = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getParent\", [this.fullPath]);\n};\n\n/**\n * Moves a directory to a new location\n *\n * @param {DirectoryEntry} parent the directory to which to move the entry\n * @param {DOMString} newName the new name of the entry, defaults to the current name\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.moveTo = function(parent, newName, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"moveTo\", [this.fullPath, parent, newName]);\n};\n\n/**\n * Removes the entry\n *\n * @param {Function} successCallback is called with no parameters\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.remove = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"remove\", [this.fullPath]);\n};\n\n/**\n * Returns a URI that can be used to identify this entry.\n *\n * @param {DOMString} mimeType for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.\n * @return uri\n */\nDirectoryEntry.prototype.toURI = function(mimeType) {\n    return \"file://\" + this.fullPath;\n};\n\n/**\n * Creates a new DirectoryReader to read entries from this directory\n */\nDirectoryEntry.prototype.createReader = function(successCallback, errorCallback) {\n    return new DirectoryReader(this.fullPath);\n};\n\n/**\n * Creates or looks up a directory\n *\n * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a directory\n * @param {Flags} options to create or excluively create the directory\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getDirectory = function(path, options, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getDirectory\", [this.fullPath, path, options]);\n};\n\n/**\n * Creates or looks up a file\n *\n * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a file\n * @param {Flags} options to create or excluively create the file\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.getFile = function(path, options, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getFile\", [this.fullPath, path, options]);\n};\n\n/**\n * Deletes a directory and all of it's contents\n *\n * @param {Function} successCallback is called with no parameters\n * @param {Function} errorCallback is called with a FileError\n */\nDirectoryEntry.prototype.removeRecursively = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"removeRecursively\", [this.fullPath]);\n};\n\n/**\n * An interface representing a directory on the file system.\n *\n * @constructor\n * {boolean} isFile always true (readonly)\n * {boolean} isDirectory always false (readonly)\n * {DOMString} name of the file, excluding the path leading to it (readonly)\n * {DOMString} fullPath the absolute full path to the file (readonly)\n * {FileSystem} filesystem on which the directory resides (readonly)\n */\nvar FileEntry = function() {\n    this.isFile = true;\n    this.isDirectory = false;\n    this.name = null;\n    this.fullPath = null;\n    this.filesystem = null;\n};\n\n/**\n * Copies a file to a new location\n *\n * @param {DirectoryEntry} parent the directory to which to copy the entry\n * @param {DOMString} newName the new name of the entry, defaults to the current name\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.copyTo = function(parent, newName, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"copyTo\", [this.fullPath, parent, newName]);\n};\n\n/**\n * Looks up the metadata of the entry\n *\n * @param {Function} successCallback is called with a Metadata object\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.getMetadata = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getMetadata\", [this.fullPath]);\n};\n\n/**\n * Gets the parent of the entry\n *\n * @param {Function} successCallback is called with a parent entry\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.getParent = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getParent\", [this.fullPath]);\n};\n\n/**\n * Moves a directory to a new location\n *\n * @param {DirectoryEntry} parent the directory to which to move the entry\n * @param {DOMString} newName the new name of the entry, defaults to the current name\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.moveTo = function(parent, newName, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"moveTo\", [this.fullPath, parent, newName]);\n};\n\n/**\n * Removes the entry\n *\n * @param {Function} successCallback is called with no parameters\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.remove = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"remove\", [this.fullPath]);\n};\n\n/**\n * Returns a URI that can be used to identify this entry.\n *\n * @param {DOMString} mimeType for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.\n * @return uri\n */\nFileEntry.prototype.toURI = function(mimeType) {\n    return \"file://\" + this.fullPath;\n};\n\n/**\n * Creates a new FileWriter associated with the file that this FileEntry represents.\n *\n * @param {Function} successCallback is called with the new FileWriter\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.createWriter = function(successCallback, errorCallback) {\n    this.file(function(filePointer) {\n        var writer = new FileWriter(filePointer);\n    \n        if (writer.fileName === null || writer.fileName === \"\") {\n            if (typeof errorCallback == \"function\") {\n                errorCallback({\n                    \"code\": FileError.INVALID_STATE_ERR\n                });\n            }\n        }\n    \n        if (typeof successCallback == \"function\") {\n            successCallback(writer);\n        }       \n    }, errorCallback);\n};\n\n/**\n * Returns a File that represents the current state of the file that this FileEntry represents.\n *\n * @param {Function} successCallback is called with the new File object\n * @param {Function} errorCallback is called with a FileError\n */\nFileEntry.prototype.file = function(successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"getFileMetadata\", [this.fullPath]);\n};\n\n/** @constructor */\nvar LocalFileSystem = function() {\n};\n\n// File error codes\nLocalFileSystem.TEMPORARY = 0;\nLocalFileSystem.PERSISTENT = 1;\nLocalFileSystem.RESOURCE = 2;\nLocalFileSystem.APPLICATION = 3;\n\n/**\n * Requests a filesystem in which to store application data.\n *\n * @param {int} type of file system being requested\n * @param {Function} successCallback is called with the new FileSystem\n * @param {Function} errorCallback is called with a FileError\n */\nLocalFileSystem.prototype.requestFileSystem = function(type, size, successCallback, errorCallback) {\n    if (type < 0 || type > 3) {\n        if (typeof errorCallback == \"function\") {\n            errorCallback({\n                \"code\": FileError.SYNTAX_ERR\n            });\n        }\n    }\n    else {\n        PhoneGap.exec(successCallback, errorCallback, \"File\", \"requestFileSystem\", [type, size]);\n    }\n};\n\n/**\n *\n * @param {DOMString} uri referring to a local file in a filesystem\n * @param {Function} successCallback is called with the new entry\n * @param {Function} errorCallback is called with a FileError\n */\nLocalFileSystem.prototype.resolveLocalFileSystemURI = function(uri, successCallback, errorCallback) {\n    PhoneGap.exec(successCallback, errorCallback, \"File\", \"resolveLocalFileSystemURI\", [uri]);\n};\n\n/**\n* This function returns and array of contacts.  It is required as we need to convert raw\n* JSON objects into concrete Contact objects.  Currently this method is called after\n* navigator.service.contacts.find but before the find methods success call back.\n*\n* @param a JSON Objects that need to be converted to DirectoryEntry or FileEntry objects.\n* @returns an entry\n*/\nLocalFileSystem.prototype._castFS = function(pluginResult) {\n    var entry = null;\n    entry = new DirectoryEntry();\n    entry.isDirectory = pluginResult.message.root.isDirectory;\n    entry.isFile = pluginResult.message.root.isFile;\n    entry.name = pluginResult.message.root.name;\n    entry.fullPath = pluginResult.message.root.fullPath;\n    pluginResult.message.root = entry;\n    return pluginResult;\n};\n\nLocalFileSystem.prototype._castEntry = function(pluginResult) {\n    var entry = null;\n    if (pluginResult.message.isDirectory) {\n        console.log(\"This is a dir\");\n        entry = new DirectoryEntry();\n    }\n    else if (pluginResult.message.isFile) {\n        console.log(\"This is a file\");\n        entry = new FileEntry();\n    }\n    entry.isDirectory = pluginResult.message.isDirectory;\n    entry.isFile = pluginResult.message.isFile;\n    entry.name = pluginResult.message.name;\n    entry.fullPath = pluginResult.message.fullPath;\n    pluginResult.message = entry;\n    return pluginResult;\n};\n\nLocalFileSystem.prototype._castEntries = function(pluginResult) {\n    var entries = pluginResult.message;\n    var retVal = [];\n    for (var i=0; i<entries.length; i++) {\n        retVal.push(window.localFileSystem._createEntry(entries[i]));\n    }\n    pluginResult.message = retVal;\n    return pluginResult;\n};\n\nLocalFileSystem.prototype._createEntry = function(castMe) {\n    var entry = null;\n    if (castMe.isDirectory) {\n        console.log(\"This is a dir\");\n        entry = new DirectoryEntry();\n    }\n    else if (castMe.isFile) {\n        console.log(\"This is a file\");\n        entry = new FileEntry();\n    }\n    entry.isDirectory = castMe.isDirectory;\n    entry.isFile = castMe.isFile;\n    entry.name = castMe.name;\n    entry.fullPath = castMe.fullPath;\n    return entry;\n};\n\nLocalFileSystem.prototype._castDate = function(pluginResult) {\n    if (pluginResult.message.modificationTime) {\n        var modTime = new Date(pluginResult.message.modificationTime);\n        pluginResult.message.modificationTime = modTime;\n    }\n    else if (pluginResult.message.lastModifiedDate) {\n        var file = new File();\n        file.size = pluginResult.message.size;\n        file.type = pluginResult.message.type;\n        file.name = pluginResult.message.name;\n        file.fullPath = pluginResult.message.fullPath;\n        file.lastModifiedDate = new Date(pluginResult.message.lastModifiedDate);\n        pluginResult.message = file;\n    }\n    return pluginResult;\n};\n\n/**\n * Add the FileSystem interface into the browser.\n */\nPhoneGap.addConstructor(function() {\n\tvar pgLocalFileSystem = new LocalFileSystem();\n\t// Needed for cast methods\n    if(typeof window.localFileSystem == \"undefined\") window.localFileSystem  = pgLocalFileSystem;\n    if(typeof window.requestFileSystem == \"undefined\") window.requestFileSystem  = pgLocalFileSystem.requestFileSystem;\n    if(typeof window.resolveLocalFileSystemURI == \"undefined\") window.resolveLocalFileSystemURI = pgLocalFileSystem.resolveLocalFileSystemURI;\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"filetransfer\")) {\nPhoneGap.addResource(\"filetransfer\");\n\n/**\n * FileTransfer uploads a file to a remote server.\n * @constructor\n */\nvar FileTransfer = function() {};\n\n/**\n * FileUploadResult\n * @constructor\n */\nvar FileUploadResult = function() {\n    this.bytesSent = 0;\n    this.responseCode = null;\n    this.response = null;\n};\n\n/**\n * FileTransferError\n * @constructor\n */\nvar FileTransferError = function() {\n    this.code = null;\n};\n\nFileTransferError.FILE_NOT_FOUND_ERR = 1;\nFileTransferError.INVALID_URL_ERR = 2;\nFileTransferError.CONNECTION_ERR = 3;\n\n/**\n* Given an absolute file path, uploads a file on the device to a remote server\n* using a multipart HTTP request.\n* @param filePath {String}           Full path of the file on the device\n* @param server {String}             URL of the server to receive the file\n* @param successCallback (Function}  Callback to be invoked when upload has completed\n* @param errorCallback {Function}    Callback to be invoked upon error\n* @param options {FileUploadOptions} Optional parameters such as file name and mimetype\n*/\nFileTransfer.prototype.upload = function(filePath, server, successCallback, errorCallback, options, debug) {\n\n    // check for options\n    var fileKey = null;\n    var fileName = null;\n    var mimeType = null;\n    var params = null;\n    if (options) {\n        fileKey = options.fileKey;\n        fileName = options.fileName;\n        mimeType = options.mimeType;\n        if (options.params) {\n            params = options.params;\n        }\n        else {\n            params = {};\n        }\n    }\n\n    PhoneGap.exec(successCallback, errorCallback, 'FileTransfer', 'upload', [filePath, server, fileKey, fileName, mimeType, params, debug]);\n};\n\n/**\n * Options to customize the HTTP request used to upload files.\n * @constructor\n * @param fileKey {String}   Name of file request parameter.\n * @param fileName {String}  Filename to be used by the server. Defaults to image.jpg.\n * @param mimeType {String}  Mimetype of the uploaded file. Defaults to image/jpeg.\n * @param params {Object}    Object with key: value params to send to the server.\n */\nvar FileUploadOptions = function(fileKey, fileName, mimeType, params) {\n    this.fileKey = fileKey || null;\n    this.fileName = fileName || null;\n    this.mimeType = mimeType || null;\n    this.params = params || null;\n};\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"geolocation\")) {\nPhoneGap.addResource(\"geolocation\");\n\n/**\n * This class provides access to device GPS data.\n * @constructor\n */\nvar Geolocation = function() {\n\n    // The last known GPS position.\n    this.lastPosition = null;\n\n    // Geolocation listeners\n    this.listeners = {};\n};\n\n/**\n * Position error object\n *\n * @constructor\n * @param code\n * @param message\n */\nvar PositionError = function(code, message) {\n    this.code = code;\n    this.message = message;\n};\n\nPositionError.PERMISSION_DENIED = 1;\nPositionError.POSITION_UNAVAILABLE = 2;\nPositionError.TIMEOUT = 3;\n\n/**\n * Asynchronously aquires the current position.\n *\n * @param {Function} successCallback    The function to call when the position data is available\n * @param {Function} errorCallback      The function to call when there is an error getting the heading position. (OPTIONAL)\n * @param {PositionOptions} options     The options for getting the position data. (OPTIONAL)\n */\nGeolocation.prototype.getCurrentPosition = function(successCallback, errorCallback, options) {\n    if (navigator._geo.listeners.global) {\n        console.log(\"Geolocation Error: Still waiting for previous getCurrentPosition() request.\");\n        try {\n            errorCallback(new PositionError(PositionError.TIMEOUT, \"Geolocation Error: Still waiting for previous getCurrentPosition() request.\"));\n        } catch (e) {\n        }\n        return;\n    }\n    var maximumAge = 10000;\n    var enableHighAccuracy = false;\n    var timeout = 10000;\n    if (typeof options !== \"undefined\") {\n        if (typeof options.maximumAge !== \"undefined\") {\n            maximumAge = options.maximumAge;\n        }\n        if (typeof options.enableHighAccuracy !== \"undefined\") {\n            enableHighAccuracy = options.enableHighAccuracy;\n        }\n        if (typeof options.timeout !== \"undefined\") {\n            timeout = options.timeout;\n        }\n    }\n    navigator._geo.listeners.global = {\"success\" : successCallback, \"fail\" : errorCallback };\n    PhoneGap.exec(null, null, \"Geolocation\", \"getCurrentLocation\", [enableHighAccuracy, timeout, maximumAge]);\n};\n\n/**\n * Asynchronously watches the geolocation for changes to geolocation.  When a change occurs,\n * the successCallback is called with the new location.\n *\n * @param {Function} successCallback    The function to call each time the location data is available\n * @param {Function} errorCallback      The function to call when there is an error getting the location data. (OPTIONAL)\n * @param {PositionOptions} options     The options for getting the location data such as frequency. (OPTIONAL)\n * @return String                       The watch id that must be passed to #clearWatch to stop watching.\n */\nGeolocation.prototype.watchPosition = function(successCallback, errorCallback, options) {\n    var maximumAge = 10000;\n    var enableHighAccuracy = false;\n    var timeout = 10000;\n    if (typeof options !== \"undefined\") {\n        if (typeof options.frequency  !== \"undefined\") {\n            maximumAge = options.frequency;\n        }\n        if (typeof options.maximumAge !== \"undefined\") {\n            maximumAge = options.maximumAge;\n        }\n        if (typeof options.enableHighAccuracy !== \"undefined\") {\n            enableHighAccuracy = options.enableHighAccuracy;\n        }\n        if (typeof options.timeout !== \"undefined\") {\n            timeout = options.timeout;\n        }\n    }\n    var id = PhoneGap.createUUID();\n    navigator._geo.listeners[id] = {\"success\" : successCallback, \"fail\" : errorCallback };\n    PhoneGap.exec(null, null, \"Geolocation\", \"start\", [id, enableHighAccuracy, timeout, maximumAge]);\n    return id;\n};\n\n/*\n * Native callback when watch position has a new position.\n * PRIVATE METHOD\n *\n * @param {String} id\n * @param {Number} lat\n * @param {Number} lng\n * @param {Number} alt\n * @param {Number} altacc\n * @param {Number} head\n * @param {Number} vel\n * @param {Number} stamp\n */\nGeolocation.prototype.success = function(id, lat, lng, alt, altacc, head, vel, stamp) {\n    var coords = new Coordinates(lat, lng, alt, altacc, head, vel);\n    var loc = new Position(coords, stamp);\n    try {\n        if (lat === \"undefined\" || lng === \"undefined\") {\n            navigator._geo.listeners[id].fail(new PositionError(PositionError.POSITION_UNAVAILABLE, \"Lat/Lng are undefined.\"));\n        }\n        else {\n            navigator._geo.lastPosition = loc;\n            navigator._geo.listeners[id].success(loc);\n        }\n    }\n    catch (e) {\n        console.log(\"Geolocation Error: Error calling success callback function.\");\n    }\n\n    if (id === \"global\") {\n        delete navigator._geo.listeners.global;\n    }\n};\n\n/**\n * Native callback when watch position has an error.\n * PRIVATE METHOD\n *\n * @param {String} id       The ID of the watch\n * @param {Number} code     The error code\n * @param {String} msg      The error message\n */\nGeolocation.prototype.fail = function(id, code, msg) {\n    try {\n        navigator._geo.listeners[id].fail(new PositionError(code, msg));\n    }\n    catch (e) {\n        console.log(\"Geolocation Error: Error calling error callback function.\");\n    }\n};\n\n/**\n * Clears the specified heading watch.\n *\n * @param {String} id       The ID of the watch returned from #watchPosition\n */\nGeolocation.prototype.clearWatch = function(id) {\n    PhoneGap.exec(null, null, \"Geolocation\", \"stop\", [id]);\n    delete navigator._geo.listeners[id];\n};\n\n/**\n * Force the PhoneGap geolocation to be used instead of built-in.\n */\nGeolocation.usingPhoneGap = false;\nGeolocation.usePhoneGap = function() {\n    if (Geolocation.usingPhoneGap) {\n        return;\n    }\n    Geolocation.usingPhoneGap = true;\n\n    // Set built-in geolocation methods to our own implementations\n    // (Cannot replace entire geolocation, but can replace individual methods)\n    navigator.geolocation.setLocation = navigator._geo.setLocation;\n    navigator.geolocation.getCurrentPosition = navigator._geo.getCurrentPosition;\n    navigator.geolocation.watchPosition = navigator._geo.watchPosition;\n    navigator.geolocation.clearWatch = navigator._geo.clearWatch;\n    navigator.geolocation.start = navigator._geo.start;\n    navigator.geolocation.stop = navigator._geo.stop;\n};\n\nPhoneGap.addConstructor(function() {\n    navigator._geo = new Geolocation();\n\n    // No native geolocation object for Android 1.x, so use PhoneGap geolocation\n    if (typeof navigator.geolocation === 'undefined') {\n        navigator.geolocation = navigator._geo;\n        Geolocation.usingPhoneGap = true;\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"media\")) {\nPhoneGap.addResource(\"media\");\n\n/**\n * This class provides access to the device media, interfaces to both sound and video\n *\n * @constructor\n * @param src                   The file name or url to play\n * @param successCallback       The callback to be called when the file is done playing or recording.\n *                                  successCallback() - OPTIONAL\n * @param errorCallback         The callback to be called if there is an error.\n *                                  errorCallback(int errorCode) - OPTIONAL\n * @param statusCallback        The callback to be called when media status has changed.\n *                                  statusCallback(int statusCode) - OPTIONAL\n * @param positionCallback      The callback to be called when media position has changed.\n *                                  positionCallback(long position) - OPTIONAL\n */\nvar Media = function(src, successCallback, errorCallback, statusCallback, positionCallback) {\n\n    // successCallback optional\n    if (successCallback && (typeof successCallback !== \"function\")) {\n        console.log(\"Media Error: successCallback is not a function\");\n        return;\n    }\n\n    // errorCallback optional\n    if (errorCallback && (typeof errorCallback !== \"function\")) {\n        console.log(\"Media Error: errorCallback is not a function\");\n        return;\n    }\n\n    // statusCallback optional\n    if (statusCallback && (typeof statusCallback !== \"function\")) {\n        console.log(\"Media Error: statusCallback is not a function\");\n        return;\n    }\n\n    // statusCallback optional\n    if (positionCallback && (typeof positionCallback !== \"function\")) {\n        console.log(\"Media Error: positionCallback is not a function\");\n        return;\n    }\n\n    this.id = PhoneGap.createUUID();\n    PhoneGap.mediaObjects[this.id] = this;\n    this.src = src;\n    this.successCallback = successCallback;\n    this.errorCallback = errorCallback;\n    this.statusCallback = statusCallback;\n    this.positionCallback = positionCallback;\n    this._duration = -1;\n    this._position = -1;\n};\n\n// Media messages\nMedia.MEDIA_STATE = 1;\nMedia.MEDIA_DURATION = 2;\nMedia.MEDIA_POSITION = 3;\nMedia.MEDIA_ERROR = 9;\n\n// Media states\nMedia.MEDIA_NONE = 0;\nMedia.MEDIA_STARTING = 1;\nMedia.MEDIA_RUNNING = 2;\nMedia.MEDIA_PAUSED = 3;\nMedia.MEDIA_STOPPED = 4;\nMedia.MEDIA_MSG = [\"None\", \"Starting\", \"Running\", \"Paused\", \"Stopped\"];\n\n// TODO: Will MediaError be used?\n/**\n * This class contains information about any Media errors.\n * @constructor\n */\nvar MediaError = function() {\n    this.code = null;\n    this.message = \"\";\n};\n\nMediaError.MEDIA_ERR_ABORTED        = 1;\nMediaError.MEDIA_ERR_NETWORK        = 2;\nMediaError.MEDIA_ERR_DECODE         = 3;\nMediaError.MEDIA_ERR_NONE_SUPPORTED = 4;\n\n/**\n * Start or resume playing audio file.\n */\nMedia.prototype.play = function() {\n    PhoneGap.exec(null, null, \"Media\", \"startPlayingAudio\", [this.id, this.src]);\n};\n\n/**\n * Stop playing audio file.\n */\nMedia.prototype.stop = function() {\n    return PhoneGap.exec(null, null, \"Media\", \"stopPlayingAudio\", [this.id]);\n};\n\n/**\n * Seek or jump to a new time in the track..\n */\nMedia.prototype.seekTo = function(milliseconds) {\n    PhoneGap.exec(null, null, \"Media\", \"seekToAudio\", [this.id, milliseconds]);\n};\n\n/**\n * Pause playing audio file.\n */\nMedia.prototype.pause = function() {\n    PhoneGap.exec(null, null, \"Media\", \"pausePlayingAudio\", [this.id]);\n};\n\n/**\n * Get duration of an audio file.\n * The duration is only set for audio that is playing, paused or stopped.\n *\n * @return      duration or -1 if not known.\n */\nMedia.prototype.getDuration = function() {\n    return this._duration;\n};\n\n/**\n * Get position of audio.\n */\nMedia.prototype.getCurrentPosition = function(success, fail) {\n    PhoneGap.exec(success, fail, \"Media\", \"getCurrentPositionAudio\", [this.id]);\n};\n\n/**\n * Start recording audio file.\n */\nMedia.prototype.startRecord = function() {\n    PhoneGap.exec(null, null, \"Media\", \"startRecordingAudio\", [this.id, this.src]);\n};\n\n/**\n * Stop recording audio file.\n */\nMedia.prototype.stopRecord = function() {\n    PhoneGap.exec(null, null, \"Media\", \"stopRecordingAudio\", [this.id]);\n};\n\n/**\n * Release the resources.\n */\nMedia.prototype.release = function() {\n    PhoneGap.exec(null, null, \"Media\", \"release\", [this.id]);\n};\n\n/**\n * List of media objects.\n * PRIVATE\n */\nPhoneGap.mediaObjects = {};\n\n/**\n * Object that receives native callbacks.\n * PRIVATE\n * @constructor\n */\nPhoneGap.Media = function() {};\n\n/**\n * Get the media object.\n * PRIVATE\n *\n * @param id            The media object id (string)\n */\nPhoneGap.Media.getMediaObject = function(id) {\n    return PhoneGap.mediaObjects[id];\n};\n\n/**\n * Audio has status update.\n * PRIVATE\n *\n * @param id            The media object id (string)\n * @param status        The status code (int)\n * @param msg           The status message (string)\n */\nPhoneGap.Media.onStatus = function(id, msg, value) {\n    var media = PhoneGap.mediaObjects[id];\n    // If state update\n    if (msg === Media.MEDIA_STATE) {\n        if (value === Media.MEDIA_STOPPED) {\n            if (media.successCallback) {\n                media.successCallback();\n            }\n        }\n        if (media.statusCallback) {\n            media.statusCallback(value);\n        }\n    }\n    else if (msg === Media.MEDIA_DURATION) {\n        media._duration = value;\n    }\n    else if (msg === Media.MEDIA_ERROR) {\n        if (media.errorCallback) {\n            media.errorCallback(value);\n        }\n    }\n    else if (msg == Media.MEDIA_POSITION) {\n        media._position = value;\n    }\n};\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"network\")) {\nPhoneGap.addResource(\"network\");\n\n/**\n * This class contains information about the current network Connection.\n * @constructor\n */\nvar Connection = function() {\n    this.type = null;\n    this._firstRun = true;\n    this._timer = null;\n    this.timeout = 500;\n\n    var me = this;\n    this.getInfo(\n        function(type) {\n            // Need to send events if we are on or offline\n            if (type == \"none\") {\n                // set a timer if still offline at the end of timer send the offline event\n                me._timer = setTimeout(function(){\n                    me.type = type;\n                    PhoneGap.fireEvent('offline');\n                    me._timer = null;\n                    }, me.timeout);\n            } else {\n                // If there is a current offline event pending clear it\n                if (me._timer != null) {\n                    clearTimeout(me._timer);\n                    me._timer = null;\n                }\n                me.type = type;\n                PhoneGap.fireEvent('online');\n            }\n            \n            // should only fire this once\n            if (me._firstRun) {\n                me._firstRun = false;\n                PhoneGap.onPhoneGapConnectionReady.fire();\n            }            \n        },\n        function(e) {\n            console.log(\"Error initializing Network Connection: \" + e);\n        });\n};\n\nConnection.UNKNOWN = \"unknown\";\nConnection.ETHERNET = \"ethernet\";\nConnection.WIFI = \"wifi\";\nConnection.CELL_2G = \"2g\";\nConnection.CELL_3G = \"3g\";\nConnection.CELL_4G = \"4g\";\nConnection.NONE = \"none\";\n\n/**\n * Get connection info\n *\n * @param {Function} successCallback The function to call when the Connection data is available\n * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)\n */\nConnection.prototype.getInfo = function(successCallback, errorCallback) {\n    // Get info\n    PhoneGap.exec(successCallback, errorCallback, \"Network Status\", \"getConnectionInfo\", []);\n};\n\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.network === \"undefined\") {\n        navigator.network = new Object();\n    }\n    if (typeof navigator.network.connection === \"undefined\") {\n        navigator.network.connection = new Connection();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"notification\")) {\nPhoneGap.addResource(\"notification\");\n\n/**\n * This class provides access to notifications on the device.\n * @constructor\n */\nvar Notification = function() {\n};\n\n/**\n * Open a native alert dialog, with a customizable title and button text.\n *\n * @param {String} message              Message to print in the body of the alert\n * @param {Function} completeCallback   The callback that is called when user clicks on a button.\n * @param {String} title                Title of the alert dialog (default: Alert)\n * @param {String} buttonLabel          Label of the close button (default: OK)\n */\nNotification.prototype.alert = function(message, completeCallback, title, buttonLabel) {\n    var _title = (title || \"Alert\");\n    var _buttonLabel = (buttonLabel || \"OK\");\n    PhoneGap.exec(completeCallback, null, \"Notification\", \"alert\", [message,_title,_buttonLabel]);\n};\n\n/**\n * Open a native confirm dialog, with a customizable title and button text.\n * The result that the user selects is returned to the result callback.\n *\n * @param {String} message              Message to print in the body of the alert\n * @param {Function} resultCallback     The callback that is called when user clicks on a button.\n * @param {String} title                Title of the alert dialog (default: Confirm)\n * @param {String} buttonLabels         Comma separated list of the labels of the buttons (default: 'OK,Cancel')\n */\nNotification.prototype.confirm = function(message, resultCallback, title, buttonLabels) {\n    var _title = (title || \"Confirm\");\n    var _buttonLabels = (buttonLabels || \"OK,Cancel\");\n    PhoneGap.exec(resultCallback, null, \"Notification\", \"confirm\", [message,_title,_buttonLabels]);\n};\n\n/**\n * Start spinning the activity indicator on the statusbar\n */\nNotification.prototype.activityStart = function() {\n    PhoneGap.exec(null, null, \"Notification\", \"activityStart\", [\"Busy\",\"Please wait...\"]);\n};\n\n/**\n * Stop spinning the activity indicator on the statusbar, if it's currently spinning\n */\nNotification.prototype.activityStop = function() {\n    PhoneGap.exec(null, null, \"Notification\", \"activityStop\", []);\n};\n\n/**\n * Display a progress dialog with progress bar that goes from 0 to 100.\n *\n * @param {String} title        Title of the progress dialog.\n * @param {String} message      Message to display in the dialog.\n */\nNotification.prototype.progressStart = function(title, message) {\n    PhoneGap.exec(null, null, \"Notification\", \"progressStart\", [title, message]);\n};\n\n/**\n * Set the progress dialog value.\n *\n * @param {Number} value         0-100\n */\nNotification.prototype.progressValue = function(value) {\n    PhoneGap.exec(null, null, \"Notification\", \"progressValue\", [value]);\n};\n\n/**\n * Close the progress dialog.\n */\nNotification.prototype.progressStop = function() {\n    PhoneGap.exec(null, null, \"Notification\", \"progressStop\", []);\n};\n\n/**\n * Causes the device to blink a status LED.\n *\n * @param {Integer} count       The number of blinks.\n * @param {String} colour       The colour of the light.\n */\nNotification.prototype.blink = function(count, colour) {\n    // NOT IMPLEMENTED\n};\n\n/**\n * Causes the device to vibrate.\n *\n * @param {Integer} mills       The number of milliseconds to vibrate for.\n */\nNotification.prototype.vibrate = function(mills) {\n    PhoneGap.exec(null, null, \"Notification\", \"vibrate\", [mills]);\n};\n\n/**\n * Causes the device to beep.\n * On Android, the default notification ringtone is played \"count\" times.\n *\n * @param {Integer} count       The number of beeps.\n */\nNotification.prototype.beep = function(count) {\n    PhoneGap.exec(null, null, \"Notification\", \"beep\", [count]);\n};\n\nPhoneGap.addConstructor(function() {\n    if (typeof navigator.notification === \"undefined\") {\n        navigator.notification = new Notification();\n    }\n});\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\nif (!PhoneGap.hasResource(\"position\")) {\nPhoneGap.addResource(\"position\");\n\n/**\n * This class contains position information.\n * @param {Object} lat\n * @param {Object} lng\n * @param {Object} acc\n * @param {Object} alt\n * @param {Object} altacc\n * @param {Object} head\n * @param {Object} vel\n * @constructor\n */\nvar Position = function(coords, timestamp) {\n\tthis.coords = coords;\n\tthis.timestamp = (timestamp !== 'undefined') ? timestamp : new Date().getTime();\n};\n\n/** @constructor */\nvar Coordinates = function(lat, lng, alt, acc, head, vel, altacc) {\n\t/**\n\t * The latitude of the position.\n\t */\n\tthis.latitude = lat;\n\t/**\n\t * The longitude of the position,\n\t */\n\tthis.longitude = lng;\n\t/**\n\t * The accuracy of the position.\n\t */\n\tthis.accuracy = acc;\n\t/**\n\t * The altitude of the position.\n\t */\n\tthis.altitude = alt;\n\t/**\n\t * The direction the device is moving at the position.\n\t */\n\tthis.heading = head;\n\t/**\n\t * The velocity with which the device is moving at the position.\n\t */\n\tthis.speed = vel;\n\t/**\n\t * The altitude accuracy of the position.\n\t */\n\tthis.altitudeAccuracy = (altacc !== 'undefined') ? altacc : null;\n};\n\n/**\n * This class specifies the options for requesting position data.\n * @constructor\n */\nvar PositionOptions = function() {\n\t/**\n\t * Specifies the desired position accuracy.\n\t */\n\tthis.enableHighAccuracy = true;\n\t/**\n\t * The timeout after which if position data cannot be obtained the errorCallback\n\t * is called.\n\t */\n\tthis.timeout = 10000;\n};\n\n/**\n * This class contains information about any GSP errors.\n * @constructor\n */\nvar PositionError = function() {\n\tthis.code = null;\n\tthis.message = \"\";\n};\n\nPositionError.UNKNOWN_ERROR = 0;\nPositionError.PERMISSION_DENIED = 1;\nPositionError.POSITION_UNAVAILABLE = 2;\nPositionError.TIMEOUT = 3;\n}\n/*\n * PhoneGap is available under *either* the terms of the modified BSD license *or* the\n * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.\n *\n * Copyright (c) 2005-2010, Nitobi Software Inc.\n * Copyright (c) 2010-2011, IBM Corporation\n */\n\n/*\n * This is purely for the Android 1.5/1.6 HTML 5 Storage\n * I was hoping that Android 2.0 would deprecate this, but given the fact that\n * most manufacturers ship with Android 1.5 and do not do OTA Updates, this is required\n */\n\nif (!PhoneGap.hasResource(\"storage\")) {\nPhoneGap.addResource(\"storage\");\n\n/**\n * SQL result set object\n * PRIVATE METHOD\n * @constructor\n */\nvar DroidDB_Rows = function() {\n    this.resultSet = [];    // results array\n    this.length = 0;        // number of rows\n};\n\n/**\n * Get item from SQL result set\n *\n * @param row           The row number to return\n * @return              The row object\n */\nDroidDB_Rows.prototype.item = function(row) {\n    return this.resultSet[row];\n};\n\n/**\n * SQL result set that is returned to user.\n * PRIVATE METHOD\n * @constructor\n */\nvar DroidDB_Result = function() {\n    this.rows = new DroidDB_Rows();\n};\n\n/**\n * Storage object that is called by native code when performing queries.\n * PRIVATE METHOD\n * @constructor\n */\nvar DroidDB = function() {\n    this.queryQueue = {};\n};\n\n/**\n * Callback from native code when query is complete.\n * PRIVATE METHOD\n *\n * @param id                Query id\n */\nDroidDB.prototype.completeQuery = function(id, data) {\n    var query = this.queryQueue[id];\n    if (query) {\n        try {\n            delete this.queryQueue[id];\n\n            // Get transaction\n            var tx = query.tx;\n\n            // If transaction hasn't failed\n            // Note: We ignore all query results if previous query\n            //       in the same transaction failed.\n            if (tx && tx.queryList[id]) {\n\n                // Save query results\n                var r = new DroidDB_Result();\n                r.rows.resultSet = data;\n                r.rows.length = data.length;\n                try {\n                    if (typeof query.successCallback === 'function') {\n                        query.successCallback(query.tx, r);\n                    }\n                } catch (ex) {\n                    console.log(\"executeSql error calling user success callback: \"+ex);\n                }\n\n                tx.queryComplete(id);\n            }\n        } catch (e) {\n            console.log(\"executeSql error: \"+e);\n        }\n    }\n};\n\n/**\n * Callback from native code when query fails\n * PRIVATE METHOD\n *\n * @param reason            Error message\n * @param id                Query id\n */\nDroidDB.prototype.fail = function(reason, id) {\n    var query = this.queryQueue[id];\n    if (query) {\n        try {\n            delete this.queryQueue[id];\n\n            // Get transaction\n            var tx = query.tx;\n\n            // If transaction hasn't failed\n            // Note: We ignore all query results if previous query\n            //       in the same transaction failed.\n            if (tx && tx.queryList[id]) {\n                tx.queryList = {};\n\n                try {\n                    if (typeof query.errorCallback === 'function') {\n                        query.errorCallback(query.tx, reason);\n                    }\n                } catch (ex) {\n                    console.log(\"executeSql error calling user error callback: \"+ex);\n                }\n\n                tx.queryFailed(id, reason);\n            }\n\n        } catch (e) {\n            console.log(\"executeSql error: \"+e);\n        }\n    }\n};\n\n/**\n * SQL query object\n * PRIVATE METHOD\n *\n * @constructor\n * @param tx                The transaction object that this query belongs to\n */\nvar DroidDB_Query = function(tx) {\n\n    // Set the id of the query\n    this.id = PhoneGap.createUUID();\n\n    // Add this query to the queue\n    droiddb.queryQueue[this.id] = this;\n\n    // Init result\n    this.resultSet = [];\n\n    // Set transaction that this query belongs to\n    this.tx = tx;\n\n    // Add this query to transaction list\n    this.tx.queryList[this.id] = this;\n\n    // Callbacks\n    this.successCallback = null;\n    this.errorCallback = null;\n\n};\n\n/**\n * Transaction object\n * PRIVATE METHOD\n * @constructor\n */\nvar DroidDB_Tx = function() {\n\n    // Set the id of the transaction\n    this.id = PhoneGap.createUUID();\n\n    // Callbacks\n    this.successCallback = null;\n    this.errorCallback = null;\n\n    // Query list\n    this.queryList = {};\n};\n\n/**\n * Mark query in transaction as complete.\n * If all queries are complete, call the user's transaction success callback.\n *\n * @param id                Query id\n */\nDroidDB_Tx.prototype.queryComplete = function(id) {\n    delete this.queryList[id];\n\n    // If no more outstanding queries, then fire transaction success\n    if (this.successCallback) {\n        var count = 0;\n        var i;\n        for (i in this.queryList) {\n            if (this.queryList.hasOwnProperty(i)) {\n                count++;\n            }\n        }\n        if (count === 0) {\n            try {\n                this.successCallback();\n            } catch(e) {\n                console.log(\"Transaction error calling user success callback: \" + e);\n            }\n        }\n    }\n};\n\n/**\n * Mark query in transaction as failed.\n *\n * @param id                Query id\n * @param reason            Error message\n */\nDroidDB_Tx.prototype.queryFailed = function(id, reason) {\n\n    // The sql queries in this transaction have already been run, since\n    // we really don't have a real transaction implemented in native code.\n    // However, the user callbacks for the remaining sql queries in transaction\n    // will not be called.\n    this.queryList = {};\n\n    if (this.errorCallback) {\n        try {\n            this.errorCallback(reason);\n        } catch(e) {\n            console.log(\"Transaction error calling user error callback: \" + e);\n        }\n    }\n};\n\n/**\n * Execute SQL statement\n *\n * @param sql                   SQL statement to execute\n * @param params                Statement parameters\n * @param successCallback       Success callback\n * @param errorCallback         Error callback\n */\nDroidDB_Tx.prototype.executeSql = function(sql, params, successCallback, errorCallback) {\n\n    // Init params array\n    if (typeof params === 'undefined') {\n        params = [];\n    }\n\n    // Create query and add to queue\n    var query = new DroidDB_Query(this);\n    droiddb.queryQueue[query.id] = query;\n\n    // Save callbacks\n    query.successCallback = successCallback;\n    query.errorCallback = errorCallback;\n\n    // Call native code\n    PhoneGap.exec(null, null, \"Storage\", \"executeSql\", [sql, params, query.id]);\n};\n\nvar DatabaseShell = function() {\n};\n\n/**\n * Start a transaction.\n * Does not support rollback in event of failure.\n *\n * @param process {Function}            The transaction function\n * @param successCallback {Function}\n * @param errorCallback {Function}\n */\nDatabaseShell.prototype.transaction = function(process, errorCallback, successCallback) {\n    var tx = new DroidDB_Tx();\n    tx.successCallback = successCallback;\n    tx.errorCallback = errorCallback;\n    try {\n        process(tx);\n    } catch (e) {\n        console.log(\"Transaction error: \"+e);\n        if (tx.errorCallback) {\n            try {\n                tx.errorCallback(e);\n            } catch (ex) {\n                console.log(\"Transaction error calling user error callback: \"+e);\n            }\n        }\n    }\n};\n\n/**\n * Open database\n *\n * @param name              Database name\n * @param version           Database version\n * @param display_name      Database display name\n * @param size              Database size in bytes\n * @return                  Database object\n */\nvar DroidDB_openDatabase = function(name, version, display_name, size) {\n    PhoneGap.exec(null, null, \"Storage\", \"openDatabase\", [name, version, display_name, size]);\n    var db = new DatabaseShell();\n    return db;\n};\n\n/**\n * For browsers with no localStorage we emulate it with SQLite. Follows the w3c api.\n * TODO: Do similar for sessionStorage.\n */\n\n/**\n * @constructor\n */\nvar CupcakeLocalStorage = function() {\n\t\ttry {\n\n\t\t\tthis.db = openDatabase('localStorage', '1.0', 'localStorage', 2621440);\n\t\t\tvar storage = {};\n\t\t\tthis.length = 0;\n\t\t\tfunction setLength (length) {\n\t\t\t\tthis.length = length;\n\t\t\t\tlocalStorage.length = length;\n\t\t\t}\n\t\t\tthis.db.transaction(\n\t\t\t\tfunction (transaction) {\n\t\t\t\t    var i;\n\t\t\t\t\ttransaction.executeSql('CREATE TABLE IF NOT EXISTS storage (id NVARCHAR(40) PRIMARY KEY, body NVARCHAR(255))');\n\t\t\t\t\ttransaction.executeSql('SELECT * FROM storage', [], function(tx, result) {\n\t\t\t\t\t\tfor(var i = 0; i < result.rows.length; i++) {\n\t\t\t\t\t\t\tstorage[result.rows.item(i)['id']] =  result.rows.item(i)['body'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetLength(result.rows.length);\n\t\t\t\t\t\tPhoneGap.initializationComplete(\"cupcakeStorage\");\n\t\t\t\t\t});\n\n\t\t\t\t},\n\t\t\t\tfunction (err) {\n\t\t\t\t\talert(err.message);\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.setItem = function(key, val) {\n\t\t\t\tif (typeof(storage[key])=='undefined') {\n\t\t\t\t\tthis.length++;\n\t\t\t\t}\n\t\t\t\tstorage[key] = val;\n\t\t\t\tthis.db.transaction(\n\t\t\t\t\tfunction (transaction) {\n\t\t\t\t\t\ttransaction.executeSql('CREATE TABLE IF NOT EXISTS storage (id NVARCHAR(40) PRIMARY KEY, body NVARCHAR(255))');\n\t\t\t\t\t\ttransaction.executeSql('REPLACE INTO storage (id, body) values(?,?)', [key,val]);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\t\t\tthis.getItem = function(key) {\n\t\t\t\treturn storage[key];\n\t\t\t};\n\t\t\tthis.removeItem = function(key) {\n\t\t\t\tdelete storage[key];\n\t\t\t\tthis.length--;\n\t\t\t\tthis.db.transaction(\n\t\t\t\t\tfunction (transaction) {\n\t\t\t\t\t\ttransaction.executeSql('CREATE TABLE IF NOT EXISTS storage (id NVARCHAR(40) PRIMARY KEY, body NVARCHAR(255))');\n\t\t\t\t\t\ttransaction.executeSql('DELETE FROM storage where id=?', [key]);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\t\t\tthis.clear = function() {\n\t\t\t\tstorage = {};\n\t\t\t\tthis.length = 0;\n\t\t\t\tthis.db.transaction(\n\t\t\t\t\tfunction (transaction) {\n\t\t\t\t\t\ttransaction.executeSql('CREATE TABLE IF NOT EXISTS storage (id NVARCHAR(40) PRIMARY KEY, body NVARCHAR(255))');\n\t\t\t\t\t\ttransaction.executeSql('DELETE FROM storage', []);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\t\t\tthis.key = function(index) {\n\t\t\t\tvar i = 0;\n\t\t\t\tfor (var j in storage) {\n\t\t\t\t\tif (i==index) {\n\t\t\t\t\t\treturn j;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t};\n\n\t\t} catch(e) {\n\t\t\talert(\"Database error \"+e+\".\");\n\t\t    return;\n\t\t}\n};\n\nPhoneGap.addConstructor(function() {\n    var setupDroidDB = function() {\n        navigator.openDatabase = window.openDatabase = DroidDB_openDatabase;\n        window.droiddb = new DroidDB();\n    }\n    if (typeof window.openDatabase === \"undefined\") {\n        setupDroidDB();\n    } else {\n        window.openDatabase_orig = window.openDatabase;\n        window.openDatabase = function(name, version, desc, size){\n            // Some versions of Android will throw a SECURITY_ERR so we need \n            // to catch the exception and seutp our own DB handling.\n            var db = null;\n            try {\n                db = window.openDatabase_orig(name, version, desc, size);\n            } \n            catch (ex) {\n                db = null;\n            }\n\n            if (db == null) {\n                setupDroidDB();\n                return DroidDB_openDatabase(name, version, desc, size);\n            }\n            else {\n                return db;\n            }\n        }\n    }\n    \n    if (typeof window.localStorage === \"undefined\") {\n        navigator.localStorage = window.localStorage = new CupcakeLocalStorage();\n        PhoneGap.waitForInitialization(\"cupcakeStorage\");\n    }\n});\n}"},"zepto":{"zepto.min":"//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n(function(a){String.prototype.trim===a&&(String.prototype.trim=function(){return this.replace(/^\\s+/,\"\").replace(/\\s+$/,\"\")}),Array.prototype.reduce===a&&(Array.prototype.reduce=function(b){if(this===void 0||this===null)throw new TypeError;var c=Object(this),d=c.length>>>0,e=0,f;if(typeof b!=\"function\")throw new TypeError;if(d==0&&arguments.length==1)throw new TypeError;if(arguments.length>=2)f=arguments[1];else do{if(e in c){f=c[e++];break}if(++e>=d)throw new TypeError}while(!0);while(e<d)e in c&&(f=b.call(a,f,c[e],e,c)),e++;return f})})();var Zepto=function(){function K(a,c){c(a);for(b in a.childNodes)K(a.childNodes[b],c)}function J(a,b,c){var d=!a||a==3?b:b.parentNode;d.insertBefore(c,a?a==1?b.nextSibling:a==2?b:null:d.firstChild)}function I(a,b,c,d){return s(b)?b.call(a,c,d):b}function H(b,c){return c===a?G(b):G(b).filter(c)}function G(b,d){if(!b)return F();if(d!==a)return G(d).find(b);if(s(b))return G(g).ready(b);if(b instanceof F)return b;var e;u(b)?e=w(b):m.indexOf(b.nodeType)>=0||b===window?(e=[b],b=null):l.test(b)?(e=E(b,RegExp.$1),b=null):b.nodeType&&b.nodeType==3?e=[b]:e=c(g,b);return F(e,b)}function F(a,b){a=a||e,a.__proto__=F.prototype,a.selector=b||\"\";return a}function E(b,c){c===a&&l.test(b)&&RegExp.$1,c in r||(c=\"*\");var d=r[c];d.innerHTML=\"\"+b;return f.call(d.childNodes)}function D(a){var b,c;h[a]||(b=g.createElement(a),g.body.appendChild(b),c=j(b,\"\").getPropertyValue(\"display\"),b.parentNode.removeChild(b),c==\"none\"&&(c=\"block\"),h[a]=c);return h[a]}function C(a,b){return typeof b==\"number\"&&!k[z(a)]?b+\"px\":b}function B(a){return a in i?i[a]:i[a]=new RegExp(\"(^|\\\\s)\"+a+\"(\\\\s|$)\")}function A(a){return a.filter(function(a,b,c){return c.indexOf(a)==b})}function z(a){return a.replace(/::/g,\"/\").replace(/([A-Z]+)([A-Z][a-z])/g,\"$1_$2\").replace(/([a-z\\d])([A-Z])/g,\"$1_$2\").replace(/_/g,\"-\").toLowerCase()}function y(a){return a.replace(/-+(.)?/g,function(a,b){return b?b.toUpperCase():\"\"})}function x(a){return a.length>0?[].concat.apply([],a):a}function w(b){return b.filter(function(b){return b!==a&&b!==null})}function v(a){return typeof a.length==\"number\"}function u(a){return a instanceof Array}function t(a){return a instanceof Object}function s(a){return{}.toString.call(a)==\"[object Function]\"}var a,b,c,d,e=[],f=e.slice,g=window.document,h={},i={},j=g.defaultView.getComputedStyle,k={\"column-count\":1,columns:1,\"font-weight\":1,\"line-height\":1,opacity:1,\"z-index\":1,zoom:1},l=/^\\s*<(\\w+)[^>]*>/,m=[1,9,11],n=[\"prepend\",\"after\",\"before\",\"append\"],o=[\"append\",\"prepend\"],p=g.createElement(\"table\"),q=g.createElement(\"tr\"),r={tr:g.createElement(\"tbody\"),tbody:p,thead:p,tfoot:p,td:q,th:q,\"*\":g.createElement(\"div\")};G.extend=function(a){f.call(arguments,1).forEach(function(c){for(b in c)a[b]=c[b]});return a},G.qsa=c=function(a,b){return f.call(a.querySelectorAll(b))},G.isFunction=s,G.isObject=t,G.isArray=u,G.map=function(a,b){var c,d=[],e,f;if(v(a))for(e=0;e<a.length;e++)c=b(a[e],e),c!=null&&d.push(c);else for(f in a)c=b(a[f],f),c!=null&&d.push(c);return x(d)},G.each=function(a,b){var c,d;if(v(a)){for(c=0;c<a.length;c++)if(b(c,a[c])===!1)return a}else for(d in a)if(b(d,a[d])===!1)return a;return a},G.fn={forEach:e.forEach,reduce:e.reduce,push:e.push,indexOf:e.indexOf,concat:e.concat,map:function(a){return G.map(this,function(b,c){return a.call(b,c,b)})},slice:function(){return G(f.apply(this,arguments))},ready:function(a){(g.readyState==\"complete\"||g.readyState==\"loaded\")&&a(),g.addEventListener(\"DOMContentLoaded\",a,!1);return this},get:function(b){return b===a?this:this[b]},size:function(){return this.length},remove:function(){return this.each(function(){this.parentNode!=null&&this.parentNode.removeChild(this)})},each:function(a){this.forEach(function(b,c){a.call(b,c,b)});return this},filter:function(a){return G([].filter.call(this,function(b){return c(b.parentNode,a).indexOf(b)>=0}))},end:function(){return this.prevObject||G()},add:function(a,b){return G(A(this.concat(G(a,b))))},is:function(a){return this.length>0&&G(this[0]).filter(a).length>0},not:function(b){var c=[];if(s(b)&&b.call!==a)this.each(function(a){b.call(this,a)||c.push(this)});else{var d=typeof b==\"string\"?this.filter(b):v(b)&&s(b.item)?f.call(b):G(b);this.forEach(function(a){d.indexOf(a)<0&&c.push(a)})}return G(c)},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return G(this[0])},last:function(){return G(this[this.length-1])},find:function(a){var b;this.length==1?b=c(this[0],a):b=this.map(function(){return c(this,a)});return G(b)},closest:function(b,d){var e=this[0],f=c(d!==a?d:g,b);f.length===0&&(e=null);while(e&&e!==g&&f.indexOf(e)<0)e=e.parentNode;return G(e!==g&&e)},parents:function(a){var b=[],c=this;while(c.length>0)c=G.map(c,function(a){if((a=a.parentNode)&&a!==g&&b.indexOf(a)<0){b.push(a);return a}});return H(b,a)},parent:function(a){return H(A(this.pluck(\"parentNode\")),a)},children:function(a){return H(this.map(function(){return f.call(this.children)}),a)},siblings:function(a){return H(this.map(function(a,b){return f.call(b.parentNode.children).filter(function(a){return a!==b})}),a)},empty:function(){return this.each(function(){this.innerHTML=\"\"})},pluck:function(a){return this.map(function(){return this[a]})},show:function(){return this.each(function(){this.style.display==\"none\"&&(this.style.display=null),j(this,\"\").getPropertyValue(\"display\")==\"none\"&&(this.style.display=D(this.nodeName))})},replaceWith:function(a){return this.each(function(){var b=this.parentNode,c=this.nextSibling;G(this).remove(),c?G(c).before(a):G(b).append(a)})},wrap:function(a){return this.each(function(){G(this).wrapAll(G(a)[0].cloneNode(!1))})},wrapAll:function(a){this[0]&&(G(this[0]).before(a=G(a)),a.append(this));return this},unwrap:function(){this.parent().each(function(){G(this).replaceWith(G(this).children())});return this},hide:function(){return this.css(\"display\",\"none\")},toggle:function(b){return(b===a?this.css(\"display\")==\"none\":b)?this.show():this.hide()},prev:function(){return G(this.pluck(\"previousElementSibling\"))},next:function(){return G(this.pluck(\"nextElementSibling\"))},html:function(b){return b===a?this.length>0?this[0].innerHTML:null:this.each(function(a){var c=this.innerHTML;G(this).empty().append(I(this,b,a,c))})},text:function(b){return b===a?this.length>0?this[0].textContent:null:this.each(function(){this.textContent=b})},attr:function(c,d){return typeof c==\"string\"&&d===a?this.length>0&&this[0].nodeName==\"INPUT\"&&this[0].type==\"text\"&&c==\"value\"?this.val():this.length>0?this[0].getAttribute(c)||(c in this[0]?this[0][c]:a):a:this.each(function(a){if(t(c))for(b in c)this.setAttribute(b,c[b]);else this.setAttribute(c,I(this,d,a,this.getAttribute(c)))})},removeAttr:function(a){return this.each(function(){this.removeAttribute(a)})},data:function(a,b){return this.attr(\"data-\"+a,b)},val:function(b){return b===a?this.length>0?this[0].value:null:this.each(function(){this.value=b})},offset:function(){if(this.length==0)return null;var a=this[0].getBoundingClientRect();return{left:a.left+g.body.scrollLeft,top:a.top+g.body.scrollTop,width:a.width,height:a.height}},css:function(c,d){if(d===a&&typeof c==\"string\")return this[0].style[y(c)]||j(this[0],\"\").getPropertyValue(c);var e=\"\";for(b in c)e+=z(b)+\":\"+C(b,c[b])+\";\";typeof c==\"string\"&&(e=z(c)+\":\"+C(c,d));return this.each(function(){this.style.cssText+=\";\"+e})},index:function(a){return a?this.indexOf(G(a)[0]):this.parent().children().indexOf(this[0])},hasClass:function(a){return this.length<1?!1:B(a).test(this[0].className)},addClass:function(a){return this.each(function(b){d=[];var c=this.className,e=I(this,a,b,c);e.split(/\\s+/g).forEach(function(a){G(this).hasClass(a)||d.push(a)},this),d.length&&(this.className+=(c?\" \":\"\")+d.join(\" \"))})},removeClass:function(b){return this.each(function(c){if(b===a)return this.className=\"\";d=this.className,I(this,b,c,d).split(/\\s+/g).forEach(function(a){d=d.replace(B(a),\" \")}),this.className=d.trim()})},toggleClass:function(b,c){return this.each(function(d){var e=this.className,f=I(this,b,d,e);c!==a&&!c||G(this).hasClass(f)?G(this).removeClass(f):G(this).addClass(f)})}},\"filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings\".split(\",\").forEach(function(a){var b=G.fn[a];G.fn[a]=function(){var a=b.apply(this,arguments);a.prevObject=this;return a}}),[\"width\",\"height\"].forEach(function(b){G.fn[b]=function(c){var d;return c===a?(d=this.offset())&&d[b]:this.css(b,c)}}),n.forEach(function(a,b){G.fn[a]=function(a){var c=typeof a==\"object\"?a:E(a);\"length\"in c||(c=[c]);if(c.length<1)return this;var d=this.length,e=d>1,f=b<2;return this.each(function(a,g){for(var h=0;h<c.length;h++){var i=c[f?c.length-h-1:h];K(i,function(a){a.nodeName!=null&&a.nodeName.toUpperCase()===\"SCRIPT\"&&window.eval.call(window,a.innerHTML)}),e&&a<d-1&&(i=i.cloneNode(!0)),J(b,g,i)}})}}),o.forEach(function(a){G.fn[a+\"To\"]=function(b){typeof b!=\"object\"&&(b=G(b)),b[a](this);return this}}),F.prototype=G.fn;return G}();\"$\"in window||(window.$=Zepto),function(a){function n(b){var c=a.extend({originalEvent:b},b);a.each(m,function(a,d){c[a]=function(){this[d]=k;return b[a].apply(b,arguments)},c[d]=l});return c}function j(a,b,d,g){var h=e(a);(b||\"\").split(/\\s/).forEach(function(b){f(a,b,d,g).forEach(function(b){delete c[h][b.i],a.removeEventListener(b.e,b.proxy,!1)})})}function i(b,d,f,h,i){var j=e(b),k=c[j]||(c[j]=[]);d.split(/\\s/).forEach(function(c){var d=i||f,e=function(a){var c=d.apply(b,[a].concat(a.data));c===!1&&a.preventDefault();return c},j=a.extend(g(c),{fn:f,proxy:e,sel:h,del:i,i:k.length});k.push(j),b.addEventListener(j.e,e,!1)})}function h(a){return new RegExp(\"(?:^| )\"+a.replace(\" \",\" .* ?\")+\"(?: |$)\")}function g(a){var b=(\"\"+a).split(\".\");return{e:b[0],ns:b.slice(1).sort().join(\" \")}}function f(a,b,d,f){b=g(b);if(b.ns)var i=h(b.ns);return(c[e(a)]||[]).filter(function(a){return a&&(!b.e||a.e==b.e)&&(!b.ns||i.test(a.ns))&&(!d||a.fn==d)&&(!f||a.sel==f)})}function e(a){return a._zid||(a._zid=d++)}var b=a.qsa,c={},d=1;a.event={add:i,remove:j},a.fn.bind=function(a,b){return this.each(function(){i(this,a,b)})},a.fn.unbind=function(a,b){return this.each(function(){j(this,a,b)})},a.fn.one=function(a,b){return this.each(function(){var c=this;i(this,a,function(e){b.call(c,e),j(c,a,arguments.callee)})})};var k=function(){return!0},l=function(){return!1},m={preventDefault:\"isDefaultPrevented\",stopImmediatePropagation:\"isImmediatePropagationStopped\",stopPropagation:\"isPropagationStopped\"};a.fn.delegate=function(c,d,e){return this.each(function(f,g){i(g,d,e,c,function(d,f){var h=d.target,i=b(g,c);while(h&&i.indexOf(h)<0)h=h.parentNode;h&&h!==g&&h!==document&&e.call(h,a.extend(n(d),{currentTarget:h,liveFired:g}),f)})})},a.fn.undelegate=function(a,b,c){return this.each(function(){j(this,b,c,a)})},a.fn.live=function(b,c){a(document.body).delegate(this.selector,b,c);return this},a.fn.die=function(b,c){a(document.body).undelegate(this.selector,b,c);return this},a.fn.trigger=function(b,c){typeof b==\"string\"&&(b=a.Event(b)),b.data=c;return this.each(function(){this.dispatchEvent(b)})},a.fn.triggerHandler=function(b,c){var d,e;this.each(function(g,h){d=n(typeof b==\"string\"?a.Event(b):b),d.data=c,d.target=h,a.each(f(h,b.type||b),function(a,b){e=b.proxy(d);if(d.isImmediatePropagationStopped())return!1})});return e},\"focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout change select keydown keypress keyup error\".split(\" \").forEach(function(b){a.fn[b]=function(a){return this.bind(b,a)}}),[\"focus\",\"blur\"].forEach(function(b){a.fn[b]=function(a){if(a)this.bind(b,a);else if(this.length)try{this.get(0)[b]()}catch(c){}return this}}),a.Event=function(b,c){var d=document.createEvent(\"Events\");c&&a.extend(d,c),d.initEvent(b,!c||c.bubbles!==!1,!0);return d}}(Zepto),function(a){function b(a){var a=a,b={},c=a.match(/(Android)\\s+([\\d.]+)/),d=a.match(/(iPad).*OS\\s([\\d_]+)/),e=!d&&a.match(/(iPhone\\sOS)\\s([\\d_]+)/),f=a.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/),g=f&&a.match(/TouchPad/),h=a.match(/(BlackBerry).*Version\\/([\\d.]+)/);c&&(b.android=!0,b.version=c[2]),e&&(b.ios=!0,b.version=e[2].replace(/_/g,\".\"),b.iphone=!0),d&&(b.ios=!0,b.version=d[2].replace(/_/g,\".\"),b.ipad=!0),f&&(b.webos=!0,b.version=f[2]),g&&(b.touchpad=!0),h&&(b.blackberry=!0,b.version=h[2]);return b}a.os=b(navigator.userAgent),a.__detect=b;var c=navigator.userAgent.match(/WebKit\\/([\\d.]+)/);a.browser=c?{webkit:!0,version:c[1]}:{webkit:!1}}(Zepto),function(a,b){var c=[\"scale\",\"scaleX\",\"scaleY\",\"translate\",\"translateX\",\"translateY\",\"translate3d\",\"skew\",\"skewX\",\"skewY\",\"rotate\",\"rotateX\",\"rotateY\",\"rotateZ\",\"rotate3d\",\"matrix\"];a.fn.anim=function(a,d,e,f){var g=[],h={},i,j=this,k;for(i in a)c.indexOf(i)>=0?g.push(i+\"(\"+a[i]+\")\"):h[i]=a[i];k=function(){j.css({\"-webkit-transition\":\"none\"}),f&&f()},d>0?this.one(\"webkitTransitionEnd\",k):setTimeout(k,0),g.length>0&&(h[\"-webkit-transform\"]=g.join(\" \")),h[\"-webkit-transition\"]=\"all \"+(d!==b?d:.5)+\"s \"+(e||\"\"),setTimeout(function(){j.css(h)},0);return this}}(Zepto),function(a){function e(){}var b=0,c=a.isObject,d;a.ajaxJSONP=function(c){var d=\"jsonp\"+ ++b,e=document.createElement(\"script\");window[d]=function(a){c.success(a),delete window[d]},e.src=c.url.replace(/=\\?/,\"=\"+d),a(\"head\").append(e)},a.ajaxSettings={type:\"GET\",beforeSend:e,success:e,error:e,complete:e,accepts:{script:\"text/javascript, application/javascript\",json:\"application/json\",xml:\"application/xml, text/xml\",html:\"text/html\",text:\"text/plain\"}},a.ajax=function(b){b=b||{};var e=a.extend({},b);for(d in a.ajaxSettings)e[d]||(e[d]=a.ajaxSettings[d]);if(/=\\?/.test(e.url))return a.ajaxJSONP(e);e.url||(e.url=window.location.toString()),e.data&&!e.contentType&&(e.contentType=\"application/x-www-form-urlencoded\"),c(e.data)&&(e.data=a.param(e.data));if(e.type.match(/get/i)&&e.data){var f=e.data;e.url.match(/\\?.*=/)?f=\"&\"+f:f[0]!=\"?\"&&(f=\"?\"+f),e.url+=f}var g=e.accepts[e.dataType],h=new XMLHttpRequest;e.headers=a.extend({\"X-Requested-With\":\"XMLHttpRequest\"},e.headers||{}),g&&(e.headers.Accept=g),h.onreadystatechange=function(){if(h.readyState==4){var a,b=!1;if(h.status>=200&&h.status<300||h.status==0){if(g==\"application/json\"&&h.responseText!=\"\")try{a=JSON.parse(h.responseText)}catch(c){b=c}else a=h.responseText;b?e.error(h,\"parsererror\",b):e.success(a,\"success\",h)}else b=!0,e.error(h,\"error\");e.complete(h,b?\"error\":\"success\")}},h.open(e.type,e.url,!0);if(e.beforeSend(h,e)===!1){h.abort();return!1}e.contentType&&(e.headers[\"Content-Type\"]=e.contentType);for(name in e.headers)h.setRequestHeader(name,e.headers[name]);h.send(e.data);return h},a.get=function(b,c){a.ajax({url:b,success:c})},a.post=function(b,c,d,e){a.isFunction(c)&&(e=e||d,d=c,c=null),a.ajax({type:\"POST\",url:b,data:c,success:d,dataType:e})},a.getJSON=function(b,c){a.ajax({url:b,success:c,dataType:\"json\"})},a.fn.load=function(b,c){if(!this.length)return this;var d=this,e=b.split(/\\s/),f;e.length>1&&(b=e[0],f=e[1]),a.get(b,function(b){d.html(f?a(document.createElement(\"div\")).html(b).find(f).html():b),c&&c()});return this},a.param=function(b,e){var f=[],g=function(a,b){f.push(encodeURIComponent(e?e+\"[\"+a+\"]\":a)+\"=\"+encodeURIComponent(b))},h=a.isArray(b);for(d in b)c(b[d])?f.push(a.param(b[d],e?e+\"[\"+d+\"]\":d)):g(h?\"\":d,b[d]);return f.join(\"&\").replace(\"%20\",\"+\")}}(Zepto),function(a){a.fn.serializeArray=function(){var b=[],c;a(Array.prototype.slice.call(this.get(0).elements)).each(function(){c=a(this),(c.attr(\"type\")!==\"radio\"||c.is(\":checked\"))&&(c.attr(\"type\")!==\"checkbox\"||!!c.is(\":checked\"))&&b.push({name:c.attr(\"name\"),value:c.val()})});return b},a.fn.serialize=function(){var a=[];this.serializeArray().forEach(function(b){a.push(encodeURIComponent(b.name)+\"=\"+encodeURIComponent(b.value))});return a.join(\"&\")},a.fn.submit=function(b){if(b)this.bind(\"submit\",b);else if(this.length){var c=a.Event(\"submit\");this.eq(0).trigger(c),c.defaultPrevented||this.get(0).submit()}return this}}(Zepto),function(a){function g(){b.last&&Date.now()-b.last>=f&&(a(b.target).trigger(\"longTap\"),b={})}function e(a,b,c,d){var e=Math.abs(a-b),f=Math.abs(c-d);return e>=f?a-b>0?\"Left\":\"Right\":c-d>0?\"Up\":\"Down\"}function d(a){return\"tagName\"in a?a:a.parentNode}var b={},c,f=750;a(document).ready(function(){a(document.body).bind(\"touchstart\",function(a){var e=Date.now(),h=e-(b.last||e);b.target=d(a.touches[0].target),c&&clearTimeout(c),b.x1=a.touches[0].pageX,b.y1=a.touches[0].pageY,h>0&&h<=250&&(b.isDoubleTap=!0),b.last=e,setTimeout(g,f)}).bind(\"touchmove\",function(a){b.x2=a.touches[0].pageX,b.y2=a.touches[0].pageY}).bind(\"touchend\",function(d){b.isDoubleTap?(a(b.target).trigger(\"doubleTap\"),b={}):b.x2>0||b.y2>0?((Math.abs(b.x1-b.x2)>30||Math.abs(b.y1-b.y2)>30)&&a(b.target).trigger(\"swipe\")&&a(b.target).trigger(\"swipe\"+e(b.x1,b.x2,b.y1,b.y2)),b.x1=b.x2=b.y1=b.y2=b.last=0):\"last\"in b&&(c=setTimeout(function(){c=null,a(b.target).trigger(\"tap\"),b={}},250))}).bind(\"touchcancel\",function(){b={}})}),[\"swipe\",\"swipeLeft\",\"swipeRight\",\"swipeUp\",\"swipeDown\",\"doubleTap\",\"tap\",\"longTap\"].forEach(function(b){a.fn[b]=function(a){return this.bind(b,a)}})}(Zepto)","zepto":"//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function(undefined){\n  if (String.prototype.trim === undefined) // fix for iOS 3.2\n    String.prototype.trim = function(){ return this.replace(/^\\s+/, '').replace(/\\s+$/, '') };\n\n  // For iOS 3.x\n  // from https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce\n  if (Array.prototype.reduce === undefined)\n    Array.prototype.reduce = function(fun){\n      if(this === void 0 || this === null) throw new TypeError();\n      var t = Object(this), len = t.length >>> 0, k = 0, accumulator;\n      if(typeof fun != 'function') throw new TypeError();\n      if(len == 0 && arguments.length == 1) throw new TypeError();\n\n      if(arguments.length >= 2)\n       accumulator = arguments[1];\n      else\n        do{\n          if(k in t){\n            accumulator = t[k++];\n            break;\n          }\n          if(++k >= len) throw new TypeError();\n        } while (true);\n\n      while (k < len){\n        if(k in t) accumulator = fun.call(undefined, accumulator, t[k], k, t);\n        k++;\n      }\n      return accumulator;\n    };\n\n})();\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\nvar Zepto = (function() {\n  var undefined, key, $$, classList, emptyArray = [], slice = emptyArray.slice,\n    document = window.document,\n    elementDisplay = {}, classCache = {},\n    getComputedStyle = document.defaultView.getComputedStyle,\n    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },\n    fragmentRE = /^\\s*<(\\w+)[^>]*>/,\n    elementTypes = [1, 9, 11],\n    adjacencyOperators = ['prepend', 'after', 'before', 'append'],\n    reverseAdjacencyOperators = ['append', 'prepend'],\n    table = document.createElement('table'),\n    tableRow = document.createElement('tr'),\n    containers = {\n      'tr': document.createElement('tbody'),\n      'tbody': table, 'thead': table, 'tfoot': table,\n      'td': tableRow, 'th': tableRow,\n      '*': document.createElement('div')\n    };\n\n  function isF(value) { return ({}).toString.call(value) == \"[object Function]\" }\n  function isO(value) { return value instanceof Object }\n  function isA(value) { return value instanceof Array }\n  function likeArray(obj) { return typeof obj.length == 'number' }\n\n  function compact(array) { return array.filter(function(item){ return item !== undefined && item !== null }) }\n  function flatten(array) { return array.length > 0 ? [].concat.apply([], array) : array }\n  function camelize(str)  { return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }\n  function dasherize(str){\n    return str.replace(/::/g, '/')\n           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n           .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n           .replace(/_/g, '-')\n           .toLowerCase();\n  }\n  function uniq(array)    { return array.filter(function(item,index,array){ return array.indexOf(item) == index }) }\n\n  function classRE(name){\n    return name in classCache ?\n      classCache[name] : (classCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\n  }\n\n  function maybeAddPx(name, value) { return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value; }\n\n  function defaultDisplay(nodeName) {\n    var element, display;\n    if (!elementDisplay[nodeName]) {\n      element = document.createElement(nodeName);\n      document.body.appendChild(element);\n      display = getComputedStyle(element, '').getPropertyValue(\"display\");\n      element.parentNode.removeChild(element);\n      display == \"none\" && (display = \"block\");\n      elementDisplay[nodeName] = display;\n    }\n    return elementDisplay[nodeName];\n  }\n\n  function fragment(html, name) {\n    if (name === undefined) fragmentRE.test(html) && RegExp.$1;\n    if (!(name in containers)) name = '*';\n    var container = containers[name];\n    container.innerHTML = '' + html;\n    return slice.call(container.childNodes);\n  }\n\n  function Z(dom, selector){\n    dom = dom || emptyArray;\n    dom.__proto__ = Z.prototype;\n    dom.selector = selector || '';\n    return dom;\n  }\n\n  function $(selector, context){\n    if (!selector) return Z();\n    if (context !== undefined) return $(context).find(selector);\n    else if (isF(selector)) return $(document).ready(selector);\n    else if (selector instanceof Z) return selector;\n    else {\n      var dom;\n      if (isA(selector)) dom = compact(selector);\n      else if (elementTypes.indexOf(selector.nodeType) >= 0 || selector === window)\n        dom = [selector], selector = null;\n      else if (fragmentRE.test(selector))\n        dom = fragment(selector, RegExp.$1), selector = null;\n      else if (selector.nodeType && selector.nodeType == 3) dom = [selector];\n      else dom = $$(document, selector);\n      return Z(dom, selector);\n    }\n  }\n\n  $.extend = function(target){\n    slice.call(arguments, 1).forEach(function(source) {\n      for (key in source) target[key] = source[key];\n    })\n    return target;\n  }\n  $.qsa = $$ = function(element, selector){ return slice.call(element.querySelectorAll(selector)) }\n\n  function filtered(nodes, selector){\n    return selector === undefined ? $(nodes) : $(nodes).filter(selector);\n  }\n\n  function funcArg(context, arg, idx, payload){\n   return isF(arg) ? arg.call(context, idx, payload) : arg;\n  }\n\n  $.isFunction = isF;\n  $.isObject = isO;\n  $.isArray = isA;\n\n  $.map = function(elements, callback) {\n    var value, values = [], i, key;\n    if (likeArray(elements))\n      for (i = 0; i < elements.length; i++) {\n        value = callback(elements[i], i);\n        if (value != null) values.push(value);\n      }\n    else\n      for (key in elements) {\n        value = callback(elements[key], key);\n        if (value != null) values.push(value);\n      }\n    return flatten(values);\n  }\n\n  $.each = function(elements, callback) {\n    var i, key;\n    if (likeArray(elements))\n      for(i = 0; i < elements.length; i++) {\n        if(callback(i, elements[i]) === false) return elements;\n      }\n    else\n      for(key in elements) {\n        if(callback(key, elements[key]) === false) return elements;\n      }\n    return elements;\n  }\n\n  $.fn = {\n    forEach: emptyArray.forEach,\n    reduce: emptyArray.reduce,\n    push: emptyArray.push,\n    indexOf: emptyArray.indexOf,\n    concat: emptyArray.concat,\n    map: function(fn){\n      return $.map(this, function(el, i){ return fn.call(el, i, el) });\n    },\n    slice: function(){\n      return $(slice.apply(this, arguments));\n    },\n    ready: function(callback){\n      if (document.readyState == 'complete' || document.readyState == 'loaded') callback();\n      document.addEventListener('DOMContentLoaded', callback, false);\n      return this;\n    },\n    get: function(idx){ return idx === undefined ? this : this[idx] },\n    size: function(){ return this.length },\n    remove: function () {\n      return this.each(function () {\n        if (this.parentNode != null) {\n          this.parentNode.removeChild(this);\n        }\n      });\n    },\n    each: function(callback){\n      this.forEach(function(el, idx){ callback.call(el, idx, el) });\n      return this;\n    },\n    filter: function(selector){\n      return $([].filter.call(this, function(element){\n        return $$(element.parentNode, selector).indexOf(element) >= 0;\n      }));\n    },\n    end: function(){\n      return this.prevObject || $();\n    },\n    add:function(selector,context){\n      return $(uniq(this.concat($(selector,context))));\n    },\n    is: function(selector){\n      return this.length > 0 && $(this[0]).filter(selector).length > 0;\n    },\n    not: function(selector){\n      var nodes=[];\n      if (isF(selector) && selector.call !== undefined)\n        this.each(function(idx){\n          if (!selector.call(this,idx)) nodes.push(this);\n        });\n      else {\n        var excludes = typeof selector == 'string' ? this.filter(selector) :\n          (likeArray(selector) && isF(selector.item)) ? slice.call(selector) : $(selector);\n        this.forEach(function(el){\n          if (excludes.indexOf(el) < 0) nodes.push(el);\n        });\n      }\n      return $(nodes);\n    },\n    eq: function(idx){\n      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1);\n    },\n    first: function(){ return $(this[0]) },\n    last: function(){ return $(this[this.length - 1]) },\n    find: function(selector){\n      var result;\n      if (this.length == 1) result = $$(this[0], selector);\n      else result = this.map(function(){ return $$(this, selector) });\n      return $(result);\n    },\n    closest: function(selector, context){\n      var node = this[0], nodes = $$(context !== undefined ? context : document, selector);\n      if (nodes.length === 0) node = null;\n      while(node && node !== document && nodes.indexOf(node) < 0) node = node.parentNode;\n      return $(node !== document && node);\n    },\n    parents: function(selector){\n      var ancestors = [], nodes = this;\n      while (nodes.length > 0)\n        nodes = $.map(nodes, function(node){\n          if ((node = node.parentNode) && node !== document && ancestors.indexOf(node) < 0) {\n            ancestors.push(node);\n            return node;\n          }\n        });\n      return filtered(ancestors, selector);\n    },\n    parent: function(selector){\n      return filtered(uniq(this.pluck('parentNode')), selector);\n    },\n    children: function(selector){\n      return filtered(this.map(function(){ return slice.call(this.children) }), selector);\n    },\n    siblings: function(selector){\n      return filtered(this.map(function(i, el){\n        return slice.call(el.parentNode.children).filter(function(child){ return child!==el });\n      }), selector);\n    },\n    empty: function(){ return this.each(function(){ this.innerHTML = '' }) },\n    pluck: function(property){ return this.map(function(){ return this[property] }) },\n    show: function(){\n      return this.each(function() {\n        this.style.display == \"none\" && (this.style.display = null);\n        if (getComputedStyle(this, '').getPropertyValue(\"display\") == \"none\") {\n          this.style.display = defaultDisplay(this.nodeName)\n        }\n      })\n    },\n    replaceWith: function(newContent) {\n      return this.each(function() {\n        var par=this.parentNode,next=this.nextSibling;\n        $(this).remove();\n        next ? $(next).before(newContent) : $(par).append(newContent);\n      });\n    },\n    wrap: function(newContent) {\n      return this.each(function() {\n        $(this).wrapAll($(newContent)[0].cloneNode(false));\n      });\n    },\n    wrapAll: function(newContent) {\n      if (this[0]) {\n        $(this[0]).before(newContent = $(newContent));\n        newContent.append(this);\n      }\n      return this;\n    },\n    unwrap: function(){\n      this.parent().each(function(){\n        $(this).replaceWith($(this).children());\n      });\n      return this;\n    },\n    hide: function(){\n      return this.css(\"display\", \"none\")\n    },\n    toggle: function(setting){\n      return (setting === undefined ? this.css(\"display\") == \"none\" : setting) ? this.show() : this.hide();\n    },\n    prev: function(){ return $(this.pluck('previousElementSibling')) },\n    next: function(){ return $(this.pluck('nextElementSibling')) },\n    html: function(html){\n      return html === undefined ?\n        (this.length > 0 ? this[0].innerHTML : null) :\n        this.each(function (idx) {\n          var originHtml = this.innerHTML;\n          $(this).empty().append( funcArg(this, html, idx, originHtml) );\n        });\n    },\n    text: function(text){\n      return text === undefined ?\n        (this.length > 0 ? this[0].textContent : null) :\n        this.each(function(){ this.textContent = text });\n    },\n    attr: function(name, value){\n      return (typeof name == 'string' && value === undefined) ?\n        (this.length > 0 && this[0].nodeName == 'INPUT' && this[0].type == 'text' && name == 'value') ? (this.val()) :\n        (this.length > 0 ? this[0].getAttribute(name) || (name in this[0] ? this[0][name] : undefined) : undefined) :\n        this.each(function(idx){\n          if (isO(name)) for (key in name) this.setAttribute(key, name[key])\n          else this.setAttribute(name, funcArg(this, value, idx, this.getAttribute(name)));\n        });\n    },\n    removeAttr: function(name) {\n      return this.each(function() { this.removeAttribute(name); });\n    },\n    data: function(name, value){\n      return this.attr('data-' + name, value);\n    },\n    val: function(value){\n      return (value === undefined) ?\n        (this.length > 0 ? this[0].value : null) :\n        this.each(function(){\n          this.value = value;\n        });\n    },\n    offset: function(){\n      if(this.length==0) return null;\n      var obj = this[0].getBoundingClientRect();\n      return {\n        left: obj.left + document.body.scrollLeft,\n        top: obj.top + document.body.scrollTop,\n        width: obj.width,\n        height: obj.height\n      };\n    },\n    css: function(property, value){\n      if (value === undefined && typeof property == 'string')\n        return this[0].style[camelize(property)] || getComputedStyle(this[0], '').getPropertyValue(property);\n      var css = '';\n      for (key in property) css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';\n      if (typeof property == 'string') css = dasherize(property) + \":\" + maybeAddPx(property, value);\n      return this.each(function() { this.style.cssText += ';' + css });\n    },\n    index: function(element){\n      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);\n    },\n    hasClass: function(name){\n      if (this.length < 1) return false;\n      else return classRE(name).test(this[0].className);\n    },\n    addClass: function(name){\n      return this.each(function(idx) {\n        classList = [];\n        var cls = this.className, newName = funcArg(this, name, idx, cls);\n        newName.split(/\\s+/g).forEach(function(klass) {\n          if (!$(this).hasClass(klass)) {\n            classList.push(klass)\n          }\n        }, this);\n        classList.length && (this.className += (cls ? \" \" : \"\") + classList.join(\" \"))\n      });\n    },\n    removeClass: function(name){\n      return this.each(function(idx) {\n        if(name === undefined)\n          return this.className = '';\n        classList = this.className;\n        funcArg(this, name, idx, classList).split(/\\s+/g).forEach(function(klass) {\n          classList = classList.replace(classRE(klass), \" \")\n        });\n        this.className = classList.trim()\n      });\n    },\n    toggleClass: function(name, when){\n      return this.each(function(idx){\n       var cls = this.className, newName = funcArg(this, name, idx, cls);\n       ((when !== undefined && !when) || $(this).hasClass(newName)) ?\n         $(this).removeClass(newName) : $(this).addClass(newName)\n      });\n    }\n  };\n\n  'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings'.split(',').forEach(function(property){\n    var fn = $.fn[property];\n    $.fn[property] = function() {\n      var ret = fn.apply(this, arguments);\n      ret.prevObject = this;\n      return ret;\n    }\n  });\n\n  ['width', 'height'].forEach(function(property){\n    $.fn[property] = function(value) {\n      var offset;\n      if (value === undefined) { return (offset = this.offset()) && offset[property] }\n      else return this.css(property, value);\n    }\n  });\n\n  function insert(operator, target, node) {\n    var parent = (!operator || operator == 3) ? target : target.parentNode;\n    parent.insertBefore(node,\n      !operator ? parent.firstChild :         // prepend\n      operator == 1 ? target.nextSibling :    // after\n      operator == 2 ? target :                // before\n      null);                                  // append\n  }\n\n  function traverseNode (node, fun) {\n    fun(node);\n    for (key in node.childNodes) {\n      traverseNode(node.childNodes[key], fun);\n    }\n  }\n\n  adjacencyOperators.forEach(function(key, operator) {\n    $.fn[key] = function(html){\n      var nodes = typeof(html) == 'object' ? html : fragment(html);\n      if (!('length' in nodes)) nodes = [nodes];\n      if (nodes.length < 1) return this;\n      var size = this.length, copyByClone = size > 1, inReverse = operator < 2;\n\n      return this.each(function(index, target){\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[inReverse ? nodes.length-i-1 : i];\n          traverseNode(node, function (node) {\n            if (node.nodeName != null && node.nodeName.toUpperCase() === 'SCRIPT') {\n              window['eval'].call(window, node.innerHTML);\n            }\n          });\n          if (copyByClone && index < size - 1) node = node.cloneNode(true);\n          insert(operator, target, node);\n        }\n      });\n    };\n  });\n\n  reverseAdjacencyOperators.forEach(function(key) {\n    $.fn[key+'To'] = function(html){\n      if (typeof(html) != 'object') html = $(html);\n      html[key](this);\n      return this;\n    };\n  });\n\n  Z.prototype = $.fn;\n\n  return $;\n})();\n\n'$' in window || (window.$ = Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function($){\n  var $$ = $.qsa, handlers = {}, _zid = 1;\n  function zid(element) {\n    return element._zid || (element._zid = _zid++);\n  }\n  function findHandlers(element, event, fn, selector) {\n    event = parse(event);\n    if (event.ns) var matcher = matcherFor(event.ns);\n    return (handlers[zid(element)] || []).filter(function(handler) {\n      return handler\n        && (!event.e  || handler.e == event.e)\n        && (!event.ns || matcher.test(handler.ns))\n        && (!fn       || handler.fn == fn)\n        && (!selector || handler.sel == selector);\n    });\n  }\n  function parse(event) {\n    var parts = ('' + event).split('.');\n    return {e: parts[0], ns: parts.slice(1).sort().join(' ')};\n  }\n  function matcherFor(ns) {\n    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');\n  }\n\n  function add(element, events, fn, selector, delegate){\n    var id = zid(element), set = (handlers[id] || (handlers[id] = []));\n    events.split(/\\s/).forEach(function(event){\n      var callback = delegate || fn;\n      var proxyfn = function (event) {\n        var result = callback.apply(element, [event].concat(event.data));\n        if (result === false) {\n          event.preventDefault();\n        }\n        return result;\n      };\n      var handler = $.extend(parse(event), {fn: fn, proxy: proxyfn, sel: selector, del: delegate, i: set.length});\n      set.push(handler);\n      element.addEventListener(handler.e, proxyfn, false);\n    });\n  }\n  function remove(element, events, fn, selector){\n    var id = zid(element);\n    (events || '').split(/\\s/).forEach(function(event){\n      findHandlers(element, event, fn, selector).forEach(function(handler){\n        delete handlers[id][handler.i];\n        element.removeEventListener(handler.e, handler.proxy, false);\n      });\n    });\n  }\n\n  $.event = { add: add, remove: remove }\n\n  $.fn.bind = function(event, callback){\n    return this.each(function(){\n      add(this, event, callback);\n    });\n  };\n  $.fn.unbind = function(event, callback){\n    return this.each(function(){\n      remove(this, event, callback);\n    });\n  };\n  $.fn.one = function(event, callback){\n    return this.each(function(){\n      var self = this;\n      add(this, event, function wrapper(evt){\n        callback.call(self, evt);\n        remove(self, event, arguments.callee);\n      });\n    });\n  };\n\n  var returnTrue = function(){return true},\n      returnFalse = function(){return false},\n      eventMethods = {\n        preventDefault: 'isDefaultPrevented',\n        stopImmediatePropagation: 'isImmediatePropagationStopped',\n        stopPropagation: 'isPropagationStopped'\n      };\n  function createProxy(event) {\n    var proxy = $.extend({originalEvent: event}, event);\n    $.each(eventMethods, function(name, predicate) {\n      proxy[name] = function(){\n        this[predicate] = returnTrue;\n        return event[name].apply(event, arguments);\n      };\n      proxy[predicate] = returnFalse;\n    })\n    return proxy;\n  }\n\n  $.fn.delegate = function(selector, event, callback){\n    return this.each(function(i, element){\n      add(element, event, callback, selector, function(e, data){\n        var target = e.target, nodes = $$(element, selector);\n        while (target && nodes.indexOf(target) < 0) target = target.parentNode;\n        if (target && !(target === element) && !(target === document)) {\n          callback.call(target, $.extend(createProxy(e), {\n            currentTarget: target, liveFired: element\n          }), data);\n        }\n      });\n    });\n  };\n  $.fn.undelegate = function(selector, event, callback){\n    return this.each(function(){\n      remove(this, event, callback, selector);\n    });\n  }\n\n  $.fn.live = function(event, callback){\n    $(document.body).delegate(this.selector, event, callback);\n    return this;\n  };\n  $.fn.die = function(event, callback){\n    $(document.body).undelegate(this.selector, event, callback);\n    return this;\n  };\n\n  $.fn.trigger = function(event, data){\n    if (typeof event == 'string') event = $.Event(event);\n    event.data = data;\n    return this.each(function(){ this.dispatchEvent(event) });\n  };\n\n  // triggers event handlers on current element just as if an event occurred,\n  // doesn't trigger an actual event, doesn't bubble\n  $.fn.triggerHandler = function(event, data){\n    var e, result;\n    this.each(function(i, element){\n      e = createProxy(typeof event == 'string' ? $.Event(event) : event);\n      e.data = data; e.target = element;\n      $.each(findHandlers(element, event.type || event), function(i, handler){\n        result = handler.proxy(e);\n        if (e.isImmediatePropagationStopped()) return false;\n      });\n    });\n    return result;\n  };\n\n  // shortcut methods for `.bind(event, fn)` for each event type\n  ('focusin focusout load resize scroll unload click dblclick '+\n  'mousedown mouseup mousemove mouseover mouseout '+\n  'change select keydown keypress keyup error').split(' ').forEach(function(event) {\n    $.fn[event] = function(callback){ return this.bind(event, callback) };\n  });\n\n  ['focus', 'blur'].forEach(function(name) {\n    $.fn[name] = function(callback) {\n      if (callback) this.bind(name, callback);\n      else if (this.length) try { this.get(0)[name]() } catch(e){};\n      return this;\n    };\n  });\n\n  $.Event = function(type, props) {\n    var event = document.createEvent('Events');\n    if (props) $.extend(event, props);\n    event.initEvent(type, !(props && props.bubbles === false), true);\n    return event;\n  };\n\n})(Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function($){\n  function detect(ua){\n    var ua = ua, os = {},\n      android = ua.match(/(Android)\\s+([\\d.]+)/),\n      ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/),\n      iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/),\n      webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/),\n      touchpad = webos && ua.match(/TouchPad/),\n      blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n    if (android) os.android = true, os.version = android[2];\n    if (iphone) os.ios = true, os.version = iphone[2].replace(/_/g, '.'), os.iphone = true;\n    if (ipad) os.ios = true, os.version = ipad[2].replace(/_/g, '.'), os.ipad = true;\n    if (webos) os.webos = true, os.version = webos[2];\n    if (touchpad) os.touchpad = true;\n    if (blackberry) os.blackberry = true, os.version = blackberry[2];\n    return os;\n  }\n\n  // ### $.os\n  //\n  // Object contains information about running environmental\n  //\n  // *Example:*\n  //\n  //     $.os.ios      // => true if running on Apple iOS\n  //     $.os.android  // => true if running on Android\n  //     $.os.webos    // => true if running on HP/Palm WebOS\n  //     $.os.touchpad // => true if running on a HP TouchPad\n  //     $.os.version  // => string with version number,\n  //                         \"4.0\", \"3.1.1\", \"2.1\", etc.\n  //     $.os.iphone   // => true if running on iPhone\n  //     $.os.ipad     // => true if running on iPad\n  //     $.os.blackberry // => true if running on BlackBerry\n  //\n  $.os = detect(navigator.userAgent);\n  $.__detect = detect;\n\n  var v = navigator.userAgent.match(/WebKit\\/([\\d.]+)/);\n  $.browser = v ? { webkit: true, version: v[1] } : { webkit: false };\n\n})(Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function($, undefined){\n  var supportedTransforms = [\n    'scale', 'scaleX', 'scaleY',\n    'translate', 'translateX', 'translateY', 'translate3d',\n    'skew',      'skewX',      'skewY',\n    'rotate',    'rotateX',    'rotateY',    'rotateZ',    'rotate3d',\n    'matrix'\n  ];\n\n  $.fn.anim = function(properties, duration, ease, callback){\n    var transforms = [], cssProperties = {}, key, that = this, wrappedCallback;\n\n    for (key in properties)\n      if (supportedTransforms.indexOf(key)>=0)\n        transforms.push(key + '(' + properties[key] + ')');\n      else\n        cssProperties[key] = properties[key];\n\n    wrappedCallback = function(){\n      that.css({'-webkit-transition':'none'});\n      callback && callback();\n    }\n\n    if (duration > 0)\n      this.one('webkitTransitionEnd', wrappedCallback);\n    else\n      setTimeout(wrappedCallback, 0);\n\n    if (transforms.length > 0) {\n      cssProperties['-webkit-transform'] = transforms.join(' ')\n    }\n\n    cssProperties['-webkit-transition'] = 'all ' + (duration !== undefined ? duration : 0.5) + 's ' + (ease || '');\n\n    setTimeout(function () {\n      that.css(cssProperties);\n    }, 0);\n\n    return this;\n  }\n})(Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function($){\n  var jsonpID = 0,\n      isObject = $.isObject,\n      key;\n\n  // Empty function, used as default callback\n  function empty() {}\n\n  // ### $.ajaxJSONP\n  //\n  // Load JSON from a server in a different domain (JSONP)\n  //\n  // *Arguments:*\n  //\n  //     options \u2014 object that configure the request,\n  //               see avaliable options below\n  //\n  // *Avaliable options:*\n  //\n  //     url     \u2014 url to which the request is sent\n  //     success \u2014 callback that is executed if the request succeeds\n  //\n  // *Example:*\n  //\n  //     $.ajaxJSONP({\n  //        url:     'http://example.com/projects?callback=?',\n  //        success: function (data) {\n  //            projects.push(json);\n  //        }\n  //     });\n  //\n  $.ajaxJSONP = function(options){\n    var jsonpString = 'jsonp' + ++jsonpID,\n        script = document.createElement('script');\n    window[jsonpString] = function(data){\n      options.success(data);\n      delete window[jsonpString];\n    };\n    script.src = options.url.replace(/=\\?/, '=' + jsonpString);\n    $('head').append(script);\n  };\n\n  // ### $.ajaxSettings\n  //\n  // AJAX settings\n  //\n  $.ajaxSettings = {\n    // Default type of request\n    type: 'GET',\n    // Callback that is executed before request\n    beforeSend: empty,\n    // Callback that is executed if the request succeeds\n    success: empty,\n    // Callback that is executed the the server drops error\n    error: empty,\n    // Callback that is executed on request complete (both: error and success)\n    complete: empty,\n    // MIME types mapping\n    accepts: {\n      script: 'text/javascript, application/javascript',\n      json:   'application/json',\n      xml:    'application/xml, text/xml',\n      html:   'text/html',\n      text:   'text/plain'\n    }\n  };\n\n  // ### $.ajax\n  //\n  // Perform AJAX request\n  //\n  // *Arguments:*\n  //\n  //     options \u2014 object that configure the request,\n  //               see avaliable options below\n  //\n  // *Avaliable options:*\n  //\n  //     type ('GET')          \u2014 type of request GET / POST\n  //     url (window.location) \u2014 url to which the request is sent\n  //     data                  \u2014 data to send to server,\n  //                             can be string or object\n  //     dataType ('json')     \u2014 what response type you accept from\n  //                             the server:\n  //                             'json', 'xml', 'html', or 'text'\n  //     success               \u2014 callback that is executed if\n  //                             the request succeeds\n  //     error                 \u2014 callback that is executed if\n  //                             the server drops error\n  //\n  // *Example:*\n  //\n  //     $.ajax({\n  //        type:     'POST',\n  //        url:      '/projects',\n  //        data:     { name: 'Zepto.js' },\n  //        dataType: 'html',\n  //        success:  function (data) {\n  //            $('body').append(data);\n  //        },\n  //        error:    function (xhr, type) {\n  //            alert('Error!');\n  //        }\n  //     });\n  //\n  $.ajax = function(options){\n    options = options || {};\n    var settings = $.extend({}, options);\n    for (key in $.ajaxSettings) if (!settings[key]) settings[key] = $.ajaxSettings[key];\n\n    if (/=\\?/.test(settings.url)) return $.ajaxJSONP(settings);\n\n    if (!settings.url) settings.url = window.location.toString();\n    if (settings.data && !settings.contentType) settings.contentType = 'application/x-www-form-urlencoded';\n    if (isObject(settings.data)) settings.data = $.param(settings.data);\n\n    if (settings.type.match(/get/i) && settings.data) {\n      var queryString = settings.data;\n      if (settings.url.match(/\\?.*=/)) {\n        queryString = '&' + queryString;\n      } else if (queryString[0] != '?') {\n        queryString = '?' + queryString;\n      }\n      settings.url += queryString;\n    }\n\n    var mime = settings.accepts[settings.dataType],\n        xhr = new XMLHttpRequest();\n\n    settings.headers = $.extend({'X-Requested-With': 'XMLHttpRequest'}, settings.headers || {});\n    if (mime) settings.headers['Accept'] = mime;\n\n    xhr.onreadystatechange = function(){\n      if (xhr.readyState == 4) {\n        var result, error = false;\n        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 0) {\n          if (mime == 'application/json' && !(xhr.responseText == '')) {\n            try { result = JSON.parse(xhr.responseText); }\n            catch (e) { error = e; }\n          }\n          else result = xhr.responseText;\n          if (error) settings.error(xhr, 'parsererror', error);\n          else settings.success(result, 'success', xhr);\n        } else {\n          error = true;\n          settings.error(xhr, 'error');\n        }\n        settings.complete(xhr, error ? 'error' : 'success');\n      }\n    };\n\n    xhr.open(settings.type, settings.url, true);\n    if (settings.beforeSend(xhr, settings) === false) {\n      xhr.abort();\n      return false;\n    }\n\n    if (settings.contentType) settings.headers['Content-Type'] = settings.contentType;\n    for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name]);\n    xhr.send(settings.data);\n\n    return xhr;\n  };\n\n  // ### $.get\n  //\n  // Load data from the server using a GET request\n  //\n  // *Arguments:*\n  //\n  //     url     \u2014 url to which the request is sent\n  //     success \u2014 callback that is executed if the request succeeds\n  //\n  // *Example:*\n  //\n  //     $.get(\n  //        '/projects/42',\n  //        function (data) {\n  //            $('body').append(data);\n  //        }\n  //     );\n  //\n  $.get = function(url, success){ $.ajax({ url: url, success: success }) };\n\n  // ### $.post\n  //\n  // Load data from the server using POST request\n  //\n  // *Arguments:*\n  //\n  //     url        \u2014 url to which the request is sent\n  //     [data]     \u2014 data to send to server, can be string or object\n  //     [success]  \u2014 callback that is executed if the request succeeds\n  //     [dataType] \u2014 type of expected response\n  //                  'json', 'xml', 'html', or 'text'\n  //\n  // *Example:*\n  //\n  //     $.post(\n  //        '/projects',\n  //        { name: 'Zepto.js' },\n  //        function (data) {\n  //            $('body').append(data);\n  //        },\n  //        'html'\n  //     );\n  //\n  $.post = function(url, data, success, dataType){\n    if ($.isFunction(data)) dataType = dataType || success, success = data, data = null;\n    $.ajax({ type: 'POST', url: url, data: data, success: success, dataType: dataType });\n  };\n\n  // ### $.getJSON\n  //\n  // Load JSON from the server using GET request\n  //\n  // *Arguments:*\n  //\n  //     url     \u2014 url to which the request is sent\n  //     success \u2014 callback that is executed if the request succeeds\n  //\n  // *Example:*\n  //\n  //     $.getJSON(\n  //        '/projects/42',\n  //        function (json) {\n  //            projects.push(json);\n  //        }\n  //     );\n  //\n  $.getJSON = function(url, success){ $.ajax({ url: url, success: success, dataType: 'json' }) };\n\n  // ### $.fn.load\n  //\n  // Load data from the server into an element\n  //\n  // *Arguments:*\n  //\n  //     url     \u2014 url to which the request is sent\n  //     [success] \u2014 callback that is executed if the request succeeds\n  //\n  // *Examples:*\n  //\n  //     $('#project_container').get(\n  //        '/projects/42',\n  //        function () {\n  //            alert('Project was successfully loaded');\n  //        }\n  //     );\n  //\n  //     $('#project_comments').get(\n  //        '/projects/42 #comments',\n  //        function () {\n  //            alert('Comments was successfully loaded');\n  //        }\n  //     );\n  //\n  $.fn.load = function(url, success){\n    if (!this.length) return this;\n    var self = this, parts = url.split(/\\s/), selector;\n    if (parts.length > 1) url = parts[0], selector = parts[1];\n    $.get(url, function(response){\n      self.html(selector ?\n        $(document.createElement('div')).html(response).find(selector).html()\n        : response);\n      success && success();\n    });\n    return this;\n  };\n\n  // ### $.param\n  //\n  // Encode object as a string for submission\n  //\n  // *Arguments:*\n  //\n  //     obj \u2014 object to serialize\n  //     [v] \u2014 root node\n  //\n  // *Example:*\n  //\n  //     $.param( { name: 'Zepto.js', version: '0.6' } );\n  //\n  $.param = function(obj, v){\n    var result = [], add = function(key, value){\n      result.push(encodeURIComponent(v ? v + '[' + key + ']' : key)\n        + '=' + encodeURIComponent(value));\n      },\n      isObjArray = $.isArray(obj);\n\n    for(key in obj)\n      if(isObject(obj[key]))\n        result.push($.param(obj[key], (v ? v + '[' + key + ']' : key)));\n      else\n        add(isObjArray ? '' : key, obj[key]);\n\n    return result.join('&').replace('%20', '+');\n  };\n})(Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function ($) {\n\n  // ### $.fn.serializeArray\n  //\n  // Encode a set of form elements as an array of names and values\n  //\n  // *Example:*\n  //\n  //     $('#login_form').serializeArray();\n  //\n  //  returns\n  //\n  //     [\n  //         {\n  //             name: 'email',\n  //             value: 'koss@nocorp.me'\n  //         },\n  //         {\n  //             name: 'password',\n  //             value: '123456'\n  //         }\n  //     ]\n  //\n  $.fn.serializeArray = function () {\n    var result = [], el;\n    $( Array.prototype.slice.call(this.get(0).elements) ).each(function () {\n      el = $(this);\n      if ( (el.attr('type') !== 'radio' || el.is(':checked')) && !(el.attr('type') === 'checkbox' && !el.is(':checked'))) {\n        result.push({\n          name: el.attr('name'),\n          value: el.val()\n        });\n      }\n    });\n    return result;\n  };\n\n  // ### $.fn.serialize\n  //\n  //\n  // Encode a set of form elements as a string for submission\n  //\n  // *Example:*\n  //\n  //     $('#login_form').serialize();\n  //\n  //  returns\n  //\n  //     \"email=koss%40nocorp.me&password=123456\"\n  //\n  $.fn.serialize = function () {\n    var result = [];\n    this.serializeArray().forEach(function (elm) {\n      result.push( encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value) );\n    });\n    return result.join('&');\n  };\n\n  // ### $.fn.submit\n  //\n  // Bind or trigger the submit event for a form\n  //\n  // *Examples:*\n  //\n  // To bind a handler for the submit event:\n  //\n  //     $('#login_form').submit(function (e) {\n  //         alert('Form was submitted!');\n  //         e.preventDefault();\n  //     });\n  //\n  // To trigger form submit:\n  //\n  //     $('#login_form').submit();\n  //\n  $.fn.submit = function (callback) {\n    if (callback) this.bind('submit', callback)\n    else if (this.length) {\n      var event = $.Event('submit');\n      this.eq(0).trigger(event);\n      if (!event.defaultPrevented) this.get(0).submit()\n    }\n    return this;\n  }\n\n})(Zepto);\n//     Zepto.js\n//     (c) 2010, 2011 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n(function($){\n  var touch = {}, touchTimeout;\n\n  function parentIfText(node){\n    return 'tagName' in node ? node : node.parentNode;\n  }\n\n  function swipeDirection(x1, x2, y1, y2){\n    var xDelta = Math.abs(x1 - x2), yDelta = Math.abs(y1 - y2);\n    if (xDelta >= yDelta) {\n      return (x1 - x2 > 0 ? 'Left' : 'Right');\n    } else {\n      return (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n  }\n\n  var longTapDelay = 750;\n  function longTap(){\n    if (touch.last && (Date.now() - touch.last >= longTapDelay)) {\n      $(touch.target).trigger('longTap');\n      touch = {};\n    }\n  }\n\n  $(document).ready(function(){\n    $(document.body).bind('touchstart', function(e){\n      var now = Date.now(), delta = now - (touch.last || now);\n      touch.target = parentIfText(e.touches[0].target);\n      touchTimeout && clearTimeout(touchTimeout);\n      touch.x1 = e.touches[0].pageX;\n      touch.y1 = e.touches[0].pageY;\n      if (delta > 0 && delta <= 250) touch.isDoubleTap = true;\n      touch.last = now;\n      setTimeout(longTap, longTapDelay);\n    }).bind('touchmove', function(e){\n      touch.x2 = e.touches[0].pageX;\n      touch.y2 = e.touches[0].pageY;\n    }).bind('touchend', function(e){\n      if (touch.isDoubleTap) {\n        $(touch.target).trigger('doubleTap');\n        touch = {};\n      } else if (touch.x2 > 0 || touch.y2 > 0) {\n        (Math.abs(touch.x1 - touch.x2) > 30 || Math.abs(touch.y1 - touch.y2) > 30)  &&\n          $(touch.target).trigger('swipe') &&\n          $(touch.target).trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)));\n        touch.x1 = touch.x2 = touch.y1 = touch.y2 = touch.last = 0;\n      } else if ('last' in touch) {\n        touchTimeout = setTimeout(function(){\n          touchTimeout = null;\n          $(touch.target).trigger('tap')\n          touch = {};\n        }, 250);\n      }\n    }).bind('touchcancel', function(){ touch = {} });\n  });\n\n  ['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown', 'doubleTap', 'tap', 'longTap'].forEach(function(m){\n    $.fn[m] = function(callback){ return this.bind(m, callback) }\n  });\n})(Zepto);"}},"language":"javascript","views":{"recent-items":{"map":"function(doc) {\n  if (doc.created_at) {\n      var p = doc.profile || {};\n      emit(doc.created_at, {\n          message:doc.message,\n          gravatar_url : p.gravatar_url,\n          nickname : p.nickname,\n          name : doc.name\n      });\n  }\n};"}},"README":"## Generated CouchApp\n\nThis is meant to be an example CouchApp and to ship with most of the CouchApp goodies.\n\nClone with git:\n\n    git clone git://github.com/couchapp/example.git\n    cd example\n\nInstall with \n    \n    couchapp push . http://localhost:5984/example\n\nor (if you have security turned on)\n\n    couchapp push . http://adminname:adminpass@localhost:5984/example\n  \nYou can also create this app by running\n\n    couchapp generate example && cd example\n    couchapp push . http://localhost:5984/example\n\nDeprecated: *couchapp generate proto && cd proto*\n\n\n## Todo\n\n* factor CouchApp Commonjs to jquery.couch.require.js\n* use $.couch.app in app.js\n\n## License\n\nApache 2.0","couchapp":{"manifest":["couchapp.json","language","README.md","vendor/","vendor/phonegap/","vendor/phonegap/phonegap-1.0.0rc3.js","vendor/zepto/","vendor/zepto/zepto.js","vendor/zepto/zepto.min.js","views/","views/recent-items/","views/recent-items/map.js"],"signatures":{"script/couchdbplugin.js":"b571473a3b8a1fc4e542d30a8bda8cbc","style/main.css":"d76a19365833c6c8615b45804f59f84a","index.html":"e78133a22422a247fbcf260dec6270b8","script/capture.js":"8f238e3bc1f2ecf659acbf4027062af0","script/app.js":"49b8595c2821f8ce154d883863fd8e86"},"description":"Photo sharing application","objects":{},"name":"PhotoShare"},"_attachments":{"index.html":{"content_type":"text/html","revpos":2,"data":"PCFET0NUWVBFIEhUTUw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPlBob25lR2FwPC90aXRsZT4KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAjc3luY3BvaW50IHsKICAgICAgcGFkZGluZzogMWVtOwogICAgfQogICAgYnV0dG9uIHsKICAgICAgaGVpZ2h0OiA0MnB4OwogICAgICBwYWRkaW5nOiAwIDhweDsKICAgICAgY29sb3I6ICMxNTFiMjQ7CiAgICAgIGxpbmUtaGVpZ2h0OiA0MnB4OwogICAgICB0ZXh0LXNoYWRvdzogI2ZmZiAwcHggMXB4IDFweDsKICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxNnB4OwogICAgICBib3JkZXI6IDFweCBzb2xpZCAjMzEzNjNkOwogICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCNjYmNmZDQpLCB0bygjOTM5YmE2KSk7CiAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDsKICAgIH0KICAgICNvdmVybGF5IHsKICAgICAgei1pbmRleDogNTsKICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICBtYXJnaW4tbGVmdDogYXV0bzsKICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvOwogICAgICB0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7CiAgICB9CiAgICAjb3ZlcmxheS1pbWFnZSB7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgdG9wOjI1JTtib3R0b206MjUlOwogICAgfQogICAgPC9zdHlsZT4KICA8L2hlYWQ+CiAgPGJvZHkgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+CiAgICA8aDE+V2VsY29tZSB0byBQaG90b1NoYXJlPC9oMT4KICAgIDxkaXYgaWQ9InN5bmNwb2ludCI+PC9kaXY+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9InV0Zi04IiBzcmM9InBob25lZ2FwLTEuMC4wcmMzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBjaGFyc2V0PSJ1dGYtOCIgc3JjPSJjb3VjaGRicGx1Z2luLmpzIj48L3NjcmlwdD4KICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iY2FwdHVyZVBob3RvIgogICAgICAgICAgICBvbmNsaWNrPSJjYXB0dXJlUGhvdG8oKTsiIGRpc2FibGVkPSJkaXNhYmxlZCI+CiAgICAgIFRha2UgYSBwaWN0dXJlIQogICAgPC9idXR0b24+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9Imxpc3RQaG90b3MiCiAgICAgICAgICAgIG9uY2xpY2s9Imxpc3RQaWN0dXJlcygpOyIgZGlzYWJsZWQ9ImRpc2FibGVkIj4KICAgICAgTGlzdCBQaWN0dXJlcwogICAgPC9idXR0b24+CiAgICA8aHIgLz4KICAgIDxkaXYgaWQ9Im1lc3NhZ2UiPjwvZGl2PgogICAgPGgzPlBpY3R1cmVzIGluIENvdWNoREI8L2gzPgogICAgPGRpdiBpZD0icGljdHVyZXMiPjwvZGl2PgogICAgPGRpdiBpZD0ib3ZlcmxheSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICA8aW1nIGlkPSJvdmVybGF5LWltYWdlIiBzcmM9Imh0dHA6Ly93d3cucGhvbmVnYXAuY29tL2Fzc2V0cy9jYXJvdXNlbC9kdzVfNC5qcGciIGFsdD0iIiAvPgogICAgPC9kaXY+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0iY2FwdHVyZS5qcyI+PC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg=="},"script/capture.js":{"content_type":"application/javascript","revpos":2,"data":"dmFyIHBpY3R1cmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBpY3R1cmVzIik7CgpmdW5jdGlvbiBhZGRJbWFnZShpbWFnZURhdGEpIHsKICAgIHZhciBuZXdJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKTsKICAgIG5ld0ltZy5zdHlsZS53aWR0aCA9ICIxMjBweCI7CiAgICBuZXdJbWcuc3R5bGUuZmxvYXQgPSAibGVmdCI7CiAgICBuZXdJbWcuc3R5bGUucGFkZGluZyA9ICIxZW0iOwogICAgbmV3SW1nLnNyYyA9ICJkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCIraW1hZ2VEYXRhOwogICAgbmV3SW1nLm9uY2xpY2sgPSBvbkltYWdlQ2xpY2s7CiAgICBwaWN0dXJlcy5hcHBlbmRDaGlsZChuZXdJbWcpOwp9CgpmdW5jdGlvbiB0b2dnbGVCdXR0b25zKCkgewogIHZhciBjYXB0dXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhcHR1cmVQaG90bycpOwogIHZhciBsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3RQaG90b3MnKTsKICBpZihjYXB0dXJlLmRpc2FibGVkICYmIGxpc3QuZGlzYWJsZWQpIHsKICAgIGNhcHR1cmUuZGlzYWJsZWQgPSAnJzsKICAgIGxpc3QuZGlzYWJsZWQgPSAnJzsKICB9IGVsc2UgewogICAgY2FwdHVyZS5kaXNhYmxlZCA9ICdkaXNhYmxlZCc7CiAgICBsaXN0LmRpc2FibGVkID0gJ2Rpc2FibGVkJzsKICB9Cn0KCmZ1bmN0aW9uIHNldE1lc3NhZ2UobWVzc2FnZSkgewogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuaW5uZXJIVE1MID0gbWVzc2FnZTsKfQoKZnVuY3Rpb24gc2V0U3luY1BvaW50KHN5bmNwb2ludCkgewogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzeW5jcG9pbnQnKS5pbm5lckhUTUwgPSAiUGhvdG9TaGFyZSBpcyBpbiBzeW5jIHdpdGg6ICIgKyBzeW5jcG9pbnQ7Cn0KCmZ1bmN0aW9uIG9uU3RhcnRTdWNjZXNzKHN0YXJ0T2JqKSB7CiAgYWxlcnQoIlN1Y2Nlc3M6ICIrc3RhcnRPYmoubWVzc2FnZSk7CiAgQ291Y2hEYlBsdWdpbi5zdGFydGVkID0gdHJ1ZTsKICAvLyBlbmFibGluZyBidXR0b25zCiAgdG9nZ2xlQnV0dG9ucygpOwogIHNldE1lc3NhZ2UoJycpOwogIHNldFN5bmNQb2ludChzdGFydE9iai5zeW5jcG9pbnQpOwp9CgpmdW5jdGlvbiBvblN0YXJ0RmFpbHVyZShlcnJvcikgewogIGFsZXJ0KCJFcnJvcjogIitlcnJvcik7Cn0KCmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImRldmljZXJlYWR5IiwgZnVuY3Rpb24oKSB7CiAgY29uc29sZS5sb2coJ2luaXRpYWxpemVkJyk7CiAgUGhvbmVHYXAuVXNlUG9sbGluZyA9IHRydWU7CiAgaWYoQ291Y2hEYlBsdWdpbi5zdGFydGVkID09IGZhbHNlKSB7CiAgICBzZXRNZXNzYWdlKCdzdGFydGluZyBDb3VjaERCJyk7CiAgICBDb3VjaERiUGx1Z2luLnN0YXJ0KG9uU3RhcnRTdWNjZXNzLCBvblN0YXJ0RmFpbHVyZSk7CiAgfQp9LCB0cnVlKTsKCmZ1bmN0aW9uIG9uQ2FwdHVyZVN1Y2Nlc3MoaW1hZ2VEYXRhKSB7CiAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwb25zZSkgewogICAgYWxlcnQocmVzcG9uc2UpOwogICAgc2V0TWVzc2FnZSgnJyk7CiAgICBhZGRJbWFnZShpbWFnZURhdGEpOwogIH07CiAgdmFyIGZhaWx1cmUgPSBmdW5jdGlvbihlcnJvcikgewogICAgYWxlcnQoZXJyb3IpOwogIH07CiAgc2V0TWVzc2FnZSgnU2F2aW5nIGltYWdlLi4uJyk7CiAgQ291Y2hEYlBsdWdpbi5zYXZlKHtpbWFnZURhdGE6IGltYWdlRGF0YX0sIHN1Y2Nlc3MsIGZhaWx1cmUpOwp9CgpmdW5jdGlvbiBvbkNhcHR1cmVGYWlsdXJlKG1lc3NhZ2UpIHsKICBhbGVydCgnRmFpbGVkIGJlY2F1c2U6ICcgKyBtZXNzYWdlKTsKfQoKZnVuY3Rpb24gY2FwdHVyZVBob3RvKCkgewogIG5hdmlnYXRvci5jYW1lcmEuZ2V0UGljdHVyZShvbkNhcHR1cmVTdWNjZXNzLCBvbkNhcHR1cmVGYWlsdXJlLCB7IHF1YWxpdHk6IDEwIH0pOwp9CgpmdW5jdGlvbiBvbkxpc3RTdWNjZXNzKGRhdGEpIHsKICB2YXIgZGJPYmogPSBKU09OLnBhcnNlKGRhdGEpOwogIHZhciBvbkZldGNoU3VjY2VzcyA9IGZ1bmN0aW9uKGltYWdlKSB7CiAgICBzZXRNZXNzYWdlKCcnKTsKICAgIC8vIHVwZGF0aW5nIERPTQogICAgY29uc29sZS5sb2coaW1hZ2UpOwogICAgLy8gYWRkaW5nIGltYWdlIHRvIGV4aXN0aW5nIGxpc3RpbmcKICAgIGFkZEltYWdlKEpTT04ucGFyc2UoaW1hZ2UpLmltYWdlRGF0YSk7CiAgfQogIHZhciBvbkZldGNoRmFpbHVyZSA9IGZ1bmN0aW9uKGVycm9yKSB7CiAgICBzZXRNZXNzYWdlKGVycm9yKTsKICAgIGNvbnNvbGUubG9nKCdGYWlsdXJlIHdoaWxlIGZldGNoaW5nIGltYWdlJyk7CiAgfQoKICBpZihkYk9iai50b3RhbF9yb3dzID09IDApIHsKICAgIHBpY3R1cmVzLmlubmVySFRNTCA9ICI8cD5ObyBwaWN0dXJlcyBpbiB0aGUgREI8L3A+IjsKICB9CiAgZWxzZSB7CiAgICBmb3IodmFyIGkgPSAwLCBqID0gZGJPYmoudG90YWxfcm93cyA7IGkgPCBqIDsgaSsrKSB7CiAgICAgIHNldE1lc3NhZ2UoJ0ZldGNoaW5nIGltYWdlcyBmcm9tIHRoZSBEQi4uLicpOwogICAgICBDb3VjaERiUGx1Z2luLmZldGNoKGRiT2JqLnJvd3NbaV0uaWQsIG9uRmV0Y2hTdWNjZXNzLCBvbkZldGNoRmFpbHVyZSk7CiAgICB9CiAgfQogIHRvZ2dsZUJ1dHRvbnMoKTsKfTsKdmFyIG9uTGlzdEZhaWx1cmUgPSBmdW5jdGlvbihlcnJvcikgewogIGFsZXJ0KGVycm9yKTsKICB0b2dnbGVCdXR0b25zKCk7Cn07CmZ1bmN0aW9uIGxpc3RQaWN0dXJlcygpIHsKICAvLyByZXNldHRpbmcgdGhlIHBpY3R1cmVzCiAgdG9nZ2xlQnV0dG9ucygpOwogIHBpY3R1cmVzLmlubmVySFRNTCA9ICIiOwogIENvdWNoRGJQbHVnaW4ubGlzdChvbkxpc3RTdWNjZXNzLCBvbkxpc3RGYWlsdXJlKTsKfQoKZnVuY3Rpb24gb25JbWFnZUNsaWNrKCkgewogIGNvbnNvbGUubG9nKCdpbWFnZSBjbGlja2VkICEnKTsKICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7CiAgdmFyIG92ZXJsYXlJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWltYWdlJyk7CiAgY29uc29sZS5sb2codGhpcy5zcmMpOwogIG92ZXJsYXlJbWFnZS5zcmMgPSB0aGlzLnNyYzsKICBvdmVybGF5SW1hZ2Uuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgY29uc29sZS5sb2cob3ZlcmxheUltYWdlLnNyYyk7CiAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmFja2J1dHRvbicsIGJhY2tLZXlEb3duLCB0cnVlKTsKfQoKZnVuY3Rpb24gYmFja0tleURvd24oKSB7CiAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpOwogIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdiYWNrYnV0dG9uJywgYmFja0tleURvd24sIHRydWUpOwp9Cg=="},"script/couchdbplugin.js":{"content_type":"application/javascript","revpos":2,"data":"dmFyIENvdWNoRGJQbHVnaW4gPSB7CiAgIHN0YXJ0ZWQ6IGZhbHNlLAogICAvLyBUT0RPOiBnb3R0YSBmaW5kIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzCiAgIGluc3RhbGxTdGF0dXM6IGZ1bmN0aW9uKGNvbXBsZXRlZCwgdG90YWwpIHsKICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLnJvdW5kKChjb21wbGV0ZWQgKiAxMDApIC8gdG90YWwpOwogICAgIHNldE1lc3NhZ2UoIkluc3RhbGxpbmcgQ291Y2hEQjogIitwcm9ncmVzcysiJSIpOwogICB9LAogICBzdGFydDogZnVuY3Rpb24oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHsKICAgICByZXR1cm4gUGhvbmVHYXAuZXhlYyhzdWNjZXNzQ2FsbGJhY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgICdDb3VjaERiUGx1Z2luJywKICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgICAgICAgICAgICAgICApOwogICB9LAogICBsaXN0OiBmdW5jdGlvbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykgewogICAgIHJldHVybiBQaG9uZUdhcC5leGVjKHN1Y2Nlc3NDYWxsYmFjaywKICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvdWNoRGJQbHVnaW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICdsaXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgfSwKICAgZmV0Y2g6IGZ1bmN0aW9uKGlkLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykgewogICAgIHJldHVybiBQaG9uZUdhcC5leGVjKHN1Y2Nlc3NDYWxsYmFjaywKICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvdWNoRGJQbHVnaW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICdmZXRjaCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgW2lkXQogICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgfSwKICAgc2F2ZTogZnVuY3Rpb24oZGF0YSwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHsKICAgICByZXR1cm4gUGhvbmVHYXAuZXhlYyhzdWNjZXNzQ2FsbGJhY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgICdDb3VjaERiUGx1Z2luJywKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2F2ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgW2RhdGFdCiAgICAgICAgICAgICAgICAgICAgICAgICApOwogICB9Cn0K"},"script/app.js":{"content_type":"application/javascript","revpos":2,"data":"Ly8gQXBhY2hlIDIuMCBKIENocmlzIEFuZGVyc29uIDIwMTEKJChmdW5jdGlvbigpIHsgICAKICAgIC8vIGZyaWVuZGx5IGhlbHBlciBodHRwOi8vdGlueXVybC5jb20vNmFvdzZ5bgogICAgJC5mbi5zZXJpYWxpemVPYmplY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbyA9IHt9OwogICAgICAgIHZhciBhID0gdGhpcy5zZXJpYWxpemVBcnJheSgpOwogICAgICAgICQuZWFjaChhLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKG9bdGhpcy5uYW1lXSkgewogICAgICAgICAgICAgICAgaWYgKCFvW3RoaXMubmFtZV0ucHVzaCkgewogICAgICAgICAgICAgICAgICAgIG9bdGhpcy5uYW1lXSA9IFtvW3RoaXMubmFtZV1dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb1t0aGlzLm5hbWVdLnB1c2godGhpcy52YWx1ZSB8fCAnJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBvW3RoaXMubmFtZV0gPSB0aGlzLnZhbHVlIHx8ICcnOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG87CiAgICB9OwoKICAgIHZhciBwYXRoID0gdW5lc2NhcGUoZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUpLnNwbGl0KCcvJyksCiAgICAgICAgZGVzaWduID0gcGF0aFszXSwKICAgICAgICBkYiA9ICQuY291Y2guZGIocGF0aFsxXSk7CiAgICBmdW5jdGlvbiBkcmF3SXRlbXMoKSB7CiAgICAgICAgZGIudmlldyhkZXNpZ24gKyAiL3JlY2VudC1pdGVtcyIsIHsKICAgICAgICAgICAgZGVzY2VuZGluZyA6ICJ0cnVlIiwKICAgICAgICAgICAgbGltaXQgOiA1MCwKICAgICAgICAgICAgdXBkYXRlX3NlcSA6IHRydWUsCiAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICBzZXR1cENoYW5nZXMoZGF0YS51cGRhdGVfc2VxKTsKICAgICAgICAgICAgICAgIHZhciB0aGVtID0gJC5tdXN0YWNoZSgkKCIjcmVjZW50LW1lc3NhZ2VzIikuaHRtbCgpLCB7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMgOiBkYXRhLnJvd3MubWFwKGZ1bmN0aW9uKHIpIHtyZXR1cm4gci52YWx1ZTt9KQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkKCIjY29udGVudCIpLmh0bWwodGhlbSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CiAgICBkcmF3SXRlbXMoKTsKICAgIHZhciBjaGFuZ2VzUnVubmluZyA9IGZhbHNlOwogICAgZnVuY3Rpb24gc2V0dXBDaGFuZ2VzKHNpbmNlKSB7CiAgICAgICAgaWYgKCFjaGFuZ2VzUnVubmluZykgewogICAgICAgICAgICB2YXIgY2hhbmdlSGFuZGxlciA9IGRiLmNoYW5nZXMoc2luY2UpOwogICAgICAgICAgICBjaGFuZ2VzUnVubmluZyA9IHRydWU7CiAgICAgICAgICAgIGNoYW5nZUhhbmRsZXIub25DaGFuZ2UoZHJhd0l0ZW1zKTsKICAgICAgICB9CiAgICB9CiAgICAkLmNvdWNoUHJvZmlsZS50ZW1wbGF0ZXMucHJvZmlsZVJlYWR5ID0gJCgiI25ldy1tZXNzYWdlIikuaHRtbCgpOwogICAgJCgiI2FjY291bnQiKS5jb3VjaExvZ2luKHsKICAgICAgICBsb2dnZWRJbiA6IGZ1bmN0aW9uKHIpIHsKICAgICAgICAgICAgJCgiI3Byb2ZpbGUiKS5jb3VjaFByb2ZpbGUociwgewogICAgICAgICAgICAgICAgcHJvZmlsZVJlYWR5IDogZnVuY3Rpb24ocHJvZmlsZSkgewogICAgICAgICAgICAgICAgICAgICQoIiNjcmVhdGUtbWVzc2FnZSIpLnN1Ym1pdChmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IHRoaXMsIGRvYyA9ICQoZm9ybSkuc2VyaWFsaXplT2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvYy5jcmVhdGVkX2F0ID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jLnByb2ZpbGUgPSBwcm9maWxlOwogICAgICAgICAgICAgICAgICAgICAgICBkYi5zYXZlRG9jKGRvYywge3N1Y2Nlc3MgOiBmdW5jdGlvbigpIHtmb3JtLnJlc2V0KCk7fX0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSkuZmluZCgiaW5wdXQiKS5mb2N1cygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGxvZ2dlZE91dCA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKCIjcHJvZmlsZSIpLmh0bWwoJzxwPlBsZWFzZSBsb2cgaW4gdG8gc2VlIHlvdXIgcHJvZmlsZS48L3A+Jyk7CiAgICAgICAgfQogICAgfSk7CiB9KTs="},"style/main.css":{"content_type":"text/css","revpos":2,"data":"LyogYWRkIHN0eWxlcyBoZXJlICovCgpib2R5IHsKICBmb250OjFlbSBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7Cn0KCmgxIHsKICBtYXJnaW4tdG9wOjA7Cn0KCiNhY2NvdW50IHsKICBmbG9hdDpyaWdodDsKfQoKI3Byb2ZpbGUgewogIGJvcmRlcjo0cHggc29saWQgI2VkZDsKICBiYWNrZ3JvdW5kOiNmZWU7CiAgcGFkZGluZzo4cHg7CiAgbWFyZ2luLWJvdHRvbTo4cHg7Cn0KCiNjb250ZW50IHsKICBib3JkZXI6NHB4IHNvbGlkICNkZGU7CiAgYmFja2dyb3VuZDojZWVmOwogIHBhZGRpbmc6OHB4OwogIHdpZHRoOjYwJTsKICBmbG9hdDpsZWZ0Owp9Cgojc2lkZWJhciB7CiAgYm9yZGVyOjRweCBzb2xpZCAjZGZkOwogIHBhZGRpbmc6OHB4OwogIGZsb2F0OnJpZ2h0OwogIHdpZHRoOjMwJTsKfQoKI2l0ZW1zIGxpIHsKICBib3JkZXI6NHB4IHNvbGlkICNmNWY1ZmY7CiAgYmFja2dyb3VuZDojZmZmOwogIHBhZGRpbmc6OHB4OwogIG1hcmdpbjo0cHggMDsKfQoKZm9ybSB7CiAgcGFkZGluZzo0cHg7CiAgbWFyZ2luOjZweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiNkZGQ7ICAKfQoKZGl2LmF2YXRhciB7CiAgcGFkZGluZzoycHg7CiAgcGFkZGluZy1ib3R0b206MDsKICBtYXJnaW4tcmlnaHQ6NHB4OwogIGZsb2F0OmxlZnQ7CiAgZm9udC1zaXplOjAuNzhlbTsKICB3aWR0aCA6IDYwcHg7CiAgaGVpZ2h0IDogNjBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCmRpdi5hdmF0YXIgLm5hbWUgewogIHBhZGRpbmctdG9wOjJweDsKfQoKZGl2LmF2YXRhciBpbWcgewogIG1hcmdpbjowIGF1dG87CiAgcGFkZGluZzowOwogIHdpZHRoIDogNDBweDsKICBoZWlnaHQgOiA0MHB4Owp9Cgp1bCB7CiAgbGlzdC1zdHlsZTogbm9uZTsKfQo="}}}
